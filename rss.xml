<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://florintoader.me</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 10 Jan 2024 08:40:43 GMT</lastBuildDate><item><title><![CDATA[The Hybrid Monolith / Microservice Approach]]></title><description><![CDATA[A typical pattern encountered in the wild is the hybrid monolith + satellite microservices approach. This usually occurs something like this…]]></description><link>https://florintoader.me/2024-01-07-common/</link><guid isPermaLink="false">https://florintoader.me/2024-01-07-common/</guid><pubDate>Sun, 07 Jan 2024 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;A typical pattern encountered in the wild is the hybrid monolith + satellite microservices approach. This usually occurs something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A company starts out with a new product, and even though care is taken to split the app into modules, there are usually dependencies between modules - for example, code that hits the same database tables.&lt;/li&gt;
&lt;li&gt;A decision is taken to move to a microservice architecture as the product team grows.&lt;/li&gt;
&lt;li&gt;The team attempts some refactoring and isolates some parts of the monolith into individual microservices.&lt;/li&gt;
&lt;li&gt;New functionality will be developed as new microservices.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, a very simple schematic for an online store might look like this:&lt;/p&gt;
&lt;img src=&quot;satelite.svg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;A common problem with breaking up modules into microservices is transactions, because even if individual pieces of code from various modules don’t call each other direcetly, they can still share data and trigger transactions in the database. And with microservices, transactions become distributed. And distributed transactions are hard.&lt;/p&gt;
&lt;h2&gt;Async Communication Is Hard&lt;/h2&gt;
&lt;p&gt;Direct calls between services are a lot simpler than async communication between&lt;/p&gt;
&lt;p&gt;Ca&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Should I Pre-Decouple Modules In My Modular Monolith?]]></title><description><![CDATA[First, when creating a new application, should you start off with a microservice architecture? Well, the prevailing wisdom is no, because…]]></description><link>https://florintoader.me/2024-01-06-modules/</link><guid isPermaLink="false">https://florintoader.me/2024-01-06-modules/</guid><pubDate>Sat, 06 Jan 2024 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;First, when creating a new application, should you start off with a microservice architecture? Well, the prevailing wisdom is no, because there is significant cost associated with maintaining, deploying, hosting., multiple microservices.&lt;/p&gt;
&lt;p&gt;Let’s also look at some microservice tenets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Microservices need to own their own data, which means you need a database for each.&lt;/li&gt;
&lt;li&gt;Instead of synchronous communication, you usually use message based communication to ensure decoupling.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what does this mean?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We lose FK constraints, and data integrity related to them.&lt;/li&gt;
&lt;li&gt;Joins across data sources can be tricky.&lt;/li&gt;
&lt;li&gt;Distributed transactions can also be tricky.&lt;/li&gt;
&lt;li&gt;We lose some data normalization (for example, catalog data will probably have to be replicated).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What is the alternative? Well, writing a monolith. Monoliths in themselves aren’t bad—actually, the term monolith refers to a unit of deployment. In fact, most APIs are monoliths. Moreover, you can even have a distributed monolith because if the dependencies between microservices are as such that you need to deploy multiple of them at the same time. The only potential problem arises if, at some later point, we want to move to a microservice architecture, those FK constraints will pose a problem. What would be a possible approach? Create a monolith with predefined modules and enforce strict domain boundaries.&lt;/p&gt;
&lt;h2&gt;DDD&lt;/h2&gt;
&lt;p&gt;Which is where Domain Driven Design comes to play.&lt;/p&gt;
&lt;p&gt;DDD is a software development approach that focuses on modeling software to align closely with the business domain it represents. It emphasizes a deep understanding of the domain, collaboration between domain experts and developers, and the creation of a shared language to bridge the gap between them. DDD has a few core concepts, but I find two of them to be of crucial importance: &lt;strong&gt;ubiquitous language&lt;/strong&gt; (using shared understanding of the domain’s terminology and concepts among developers and domain experts) and &lt;strong&gt;bounded contexts&lt;/strong&gt; (dividing the domain into smaller, manageable subdomains with well-defined boundaries).&lt;/p&gt;
&lt;p&gt;So what is the goal?&lt;/p&gt;
&lt;p&gt;Well, maybe we can do a modular monolith application in which the modules are already predecoupled, so if we ever want to pull some of them out as separate units of deployment, we can do so easily.&lt;/p&gt;
&lt;h2&gt;A Case Study&lt;/h2&gt;
&lt;p&gt;Let’s define a set of spec for an application.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;We want to build an online shopping platform where multiple vendors can sell products. Multiple venders can sell the same product (defined by SKU).&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Well start by defining a set of entities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Product&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ProductCategory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;User&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;UserAddress&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ProductReview&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;UserAddress&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Vendor&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s try to sketch a database schema.&lt;/p&gt;
&lt;img src=&quot;first.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;OK, that was the first draft. Now, let’s do a mental exercise. Let’s think what would be needed in order to break this monolith. We would need to identify a set of domain boundaries, which would correspond to the individual microservices. We won’t actually create microservices, but we will look at what we need to do for our code to be &lt;em&gt;splittable&lt;/em&gt;.&lt;/p&gt;
&lt;img src=&quot;screen.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;As we see, we have created groups of related objects. The would correspond to individual modules / microservices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logging in.&lt;/li&gt;
&lt;li&gt;Search and product details.&lt;/li&gt;
&lt;li&gt;Payment.&lt;/li&gt;
&lt;li&gt;Catalog.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to separate them into separate modules, we would need to remove the FK constraints. Of course, the question becomes then, how would they communicate. My approach is to use unique domain properties such as the user id, or some company tax code. This is what we will do here.&lt;/p&gt;
&lt;img src=&quot;screen.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;One idea to achieve coupling is to break the monolith.&lt;/p&gt;
&lt;h3&gt;Some Thoughts On Module Communication&lt;/h3&gt;
&lt;p&gt;Decoupling your data model won’t achive anything if individual services in your app are coupled (call one another directly). We know that in the microservice world, direct calls are a no-no. So in order for our microservices to be decoupled, we would need to also decouple our service layer, not just data layer.&lt;/p&gt;
&lt;p&gt;One approach to communication would be to use a message bus. Since your client application will probably make use of push notifications, you’ll use messeging anyway, in conjuction with module communication. This is called &lt;em&gt;coreography&lt;/em&gt;. The other approach is to use &lt;em&gt;orhestration&lt;/em&gt;, which is usually done on the client, because as I’ve mentioned, we want to avoid direct synchronous calls between microservices.&lt;/p&gt;
&lt;p&gt;Let’s assume we have a Payment service, and it needs to synchronize with the Catalog service. Let’s use some code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the user initiates a payment, the product needs to be reserved in the Catalog service.&lt;/li&gt;
&lt;li&gt;This will in turn send a message acknowledging that the product is indeed reserved, so that if another customer tries to place an order, it will manage the stock levels appropriately.&lt;/li&gt;
&lt;li&gt;Once this worked, payment processing will begin.&lt;/li&gt;
&lt;li&gt;If payment succeeds, another message will be sent to the Catalog service, and stocks will be decreased by one.&lt;/li&gt;
&lt;li&gt;Otherwise, the reserved status will be removed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The client can also do orchestration and call these steps in order, but this isn’t recommended for business logic flows, especially not for business flows.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[DDD and BDD Are a Match Made In Heaven]]></title><description><![CDATA[Any lawyer will tell you that legal contracts must follow very specific rules, otherwise they can be deemed invalid. You simply cannot type…]]></description><link>https://florintoader.me/2024-01-08-ddd-bdd/</link><guid isPermaLink="false">https://florintoader.me/2024-01-08-ddd-bdd/</guid><pubDate>Sat, 06 Jan 2024 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;Any lawyer will tell you that legal contracts must follow very specific rules, otherwise they can be deemed invalid. You simply cannot type whatever you want in a contract, it must follow a specific structure, use specific legal terms and so forth. Even software contracts can be thrown out of court because, if the specifications aren’t clear enough.&lt;/p&gt;
&lt;p&gt;Here’s the thing: it is desirable to have very concrete specs, even if they aren’t used legally binding.&lt;/p&gt;
&lt;h2&gt;Product Specifications&lt;/h2&gt;
&lt;p&gt;Think of specs as a contract between the product owner and the development team. Even if nobody gets sued, there is a risk of time being spent on implementing the wrong thing. This in turn can lead to rebuilding portions of the application under time pressure, frustration in the team and even people trying to shift blame. While developers can ask for clarifications if they don’t understand something, sometimes there are unknown unknowns, or they simply might have thought they understood everything.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I’ve been in situations where I thought I understood the requirements, the technical lead thought he understood them, the UX designer thought the same, and each of us understood it quite differently. Complex domains might involve hundreds of types of domain objects: products, records, items, comments, tasks, categories, accounts, users etc.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And these structures are hierarchical because you can have comments on various products (on your site), or comments on other entities. Here’s a simple example of confusion: an app registration and the app principal are two different things. Simply referring to it as the “app” can lead to confusion, because they can even be in different Azure tenants. An inspection checklist can have some comments, but also comments can be on the individual items on the list. &lt;em&gt;Tags&lt;/em&gt;, comments, categories can be applied to multiple things. So it is customary for data tables to be named like OrderItem, or PostComment, to indicate a foreign key relation.&lt;/p&gt;
&lt;h2&gt;Enter DDD&lt;/h2&gt;
&lt;p&gt;A PO can have a good understanding of what the client wants, but if that is not properly communicated to the devs, it’s a problem.&lt;/p&gt;
&lt;img src=&quot;ddd.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Domain-driven design (DDD) is a software development approach that emphasizes modeling software to closely match the specific domain it is intended to represent. It advocates for close collaboration between software developers and domain experts to ensure that the software accurately reflects the business rules, processes, and terminology of the domain.&lt;/p&gt;
&lt;p&gt;Here are some key principles of DDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Ubiquitous Language:&lt;/em&gt; establish a shared language between domain experts and developers to ensure consistent understanding of the domain concepts and terminology.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bounded Context:&lt;/em&gt; divide the software system into self-contained modules, each focused on a specific aspect of the domain, to manage complexity and maintain domain knowledge.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Continuous collaboration:&lt;/em&gt; Foster ongoing collaboration between developers and domain experts to ensure the software remains consistent with the evolving domain and business needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll break that down in a bit. Ubiquitous language means we always refer to an entity by the same term. Let’s say we have a blogging engine. So we’ll have users, blogs, blog posts, etc.&lt;/p&gt;
&lt;p&gt;The database schema would look something like this:&lt;/p&gt;
&lt;h2&gt;What is BDD&lt;/h2&gt;
&lt;p&gt;Most developers are familiar with TDD, and if your team has the budget for it (it can be expensive, and some teams tend to go with the 20/80 rule, where they only cover the 20% of the code that’s responsible with the majority of the bugs).&lt;/p&gt;
&lt;img src=&quot;cucumber.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Consider that each of these lines: a lot of these lines translate to code. Cucumber creates a set of constraints for the product owner, similarly to how a control library with a theme would constrain the designer.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;@When&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;^I click the &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;([^&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;]+)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt; button$&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;clickButton&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;buttonName&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// Code to click the button with the specified name&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is interesting is that by getting POs to write specs in Cucumber, we have created &lt;em&gt;a framework of specs&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Advantages / Disadvantages&lt;/h3&gt;
&lt;p&gt;Just as TDD, BDD can be costly in terms of time to implement.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gamification Leads To People Gaming The System]]></title><description><![CDATA[Something I’ve seen more and more in SCRUM teams is the concept of gamification. Gamification is the process of applying game-like elements…]]></description><link>https://florintoader.me/2024-01-05-gamification/</link><guid isPermaLink="false">https://florintoader.me/2024-01-05-gamification/</guid><pubDate>Mon, 01 Jan 2024 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;Something I’ve seen more and more in SCRUM teams is the concept of gamification. Gamification is the process of applying game-like elements and mechanics to non-game contexts to enhance user engagement, motivation, and overall experience. It involves incorporating game design elements such as points, badges, leaderboards, challenges, and rewards into non-game activities, such as marketing campaigns, educational programs, workplace training, and even daily tasks. The goal of gamification is to tap into the natural human desire for challenge, competition, and social interaction that we experience when playing games.&lt;/p&gt;
&lt;img src=&quot;stack.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;By incorporating these elements into non-game activities, gamification can make them more engaging, motivating, and ultimately more successful. Or so it is argued.
In theory, this sounds great. Except for when it isn’t.&lt;/p&gt;
&lt;p&gt;It’s argued that gamification can foster social connection by providing opportunities for collaboration, competition, and peer recognition in your team, because it introduces an element of playfulness in the SCRUM and development process, but I’ve found the opposite to be true in a lot of cases. Gamification is always tied to metrics, e.g., number of story points closed or tickets.&lt;/p&gt;
&lt;p&gt;It can lead to people trying to game the system, which in turn can lead to resentment and a toxic environment.&lt;/p&gt;
&lt;h2&gt;Chasing (Story) Points&lt;/h2&gt;
&lt;p&gt;Imagine an NBA team. Not all players have the same role. Now imagine that all players are evaluated based on the number of points they score. What will happen is instead of the players working as a team, they will compete for the ball between themselves, as well as against the other team. In hid infamous title defense against Demian Maia, the Anderson Silva used a simple strategy. Knowing that Maya is a Brazilian Jiu Jitsu phenom, he tried to avoid getting into close contact at all costs, simply resorting to a strategy where he would pepper him with shots from&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In fact, he did the bare minimum to win the fight and retain his title.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;He won on points, and that was the whole strategy.&lt;/p&gt;
&lt;p&gt;In many companies, various metrics will be used in conjunction with stack ranking, which is now an infamous tactic.&lt;/p&gt;
&lt;p&gt;In November 2013, Microsoft Corp. announced it had ended its controversial “stack ranking” employee-review and compensation system and no longer requires managers to grade employees against one another and rank them on a scale of 1 to 5. The most contentious aspect of this approach was
its targeted, or forced, distribution requirements, which meant managers had to designate a small percentage of their direct reports as underperformers.&lt;/p&gt;
&lt;p&gt;Stack ranking, also known as forced ranking, is an employee evaluation method that categorizes employees into a predetermined distribution of performance levels, typically a bell curve. This method is commonly used in software development companies to assess and compare the performance of their employees. In stack ranking, managers are tasked with placing each employee within a specific performance category, such as “exceeds expectations,” “meets expectations,” “needs improvement,” or “underperforms.” This process often involves comparing employees against each other, which can create a competitive and sometimes adversarial environment within teams.&lt;/p&gt;
&lt;h2&gt;Writing Software Is a Collaborative Effort&lt;/h2&gt;
&lt;p&gt;While stack ranking aims to identify and reward top performers, it has been criticized for its drawbacks and negative impacts on employee morale, motivation, and overall team dynamics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will always require assistance from other people when changing their code. If the environment is hostile, it might lead to information hiding.&lt;/li&gt;
&lt;li&gt;Merging your code requires passing code reviews, and some developers can develop passive-aggressive attitudes and reject pull requests for small teams. This in turn requires other developers to constantly task switch, etc. which can lead to frustration and wasted time.&lt;/li&gt;
&lt;li&gt;Developers might take shortcuts in how they write their code, just to be able to “close the task” and “get the story points” at the end of the sprint.&lt;/li&gt;
&lt;li&gt;Many times as a developer, you will be blocked by other tasks and sometimes all it takes is a small easy fix from a team member.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately, my feeling is it leads to a zero-sum game mentality, and it should be used with caution.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Explaining Architectural Concepts]]></title><description><![CDATA[One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company. And if there are…]]></description><link>https://florintoader.me/2024-01-03-architecture/</link><guid isPermaLink="false">https://florintoader.me/2024-01-03-architecture/</guid><pubDate>Mon, 01 Jan 2024 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company. And if there are multiple microservices involved, which all use different approaches, it can be confusing. Some older microservices might use MVC, in a Web API context. The newer ones might use minimal APIs. A select few might do CQRS.&lt;/p&gt;
&lt;p&gt;Ultimately, it all boils down to things like cohesion, coupling, and encapsulation.&lt;/p&gt;
&lt;p&gt;The PC architecture is one of the simplest analogy you can use to explain these concepts to a junior developer. It would consist of the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A motherboard.&lt;/li&gt;
&lt;li&gt;A CPU, which can be an x86 or arm.&lt;/li&gt;
&lt;li&gt;Hard disk drives.&lt;/li&gt;
&lt;li&gt;A graphics card.&lt;/li&gt;
&lt;li&gt;Memory chips.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;moth.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Right off the bat, we notice that everything is modular, and everything consists of components communicating through standardized interfaces. The CPU doesn’t communicate directly to RAM, it goes through the motherboard. Same with the graphics card, etc.&lt;/p&gt;
&lt;h2&gt;Coupling&lt;/h2&gt;
&lt;p&gt;Let’s assume we have created a very powerful PC for development. But after a while, we might want to turn it also use it as a gaming PC. We can swap out our old graphics card with a newer one, and very easily, and it doesn’t really impact the system in any way, because it doesn’t affect the rest of the system, and because it communicates with the rest through a PCI interface on the motherboard. This is an example of decoupling.&lt;/p&gt;
&lt;p&gt;A simple analogy with for better understanding coupling is a Rubik’s cube.&lt;/p&gt;
&lt;img src=&quot;rubik.jpeg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Have you ever tried to solve one of these? If you don’t know the trick, what you will try to do is to solve one face first, and then try to focus on the others.
Of course, this doesn’t work because the colors are coupled and trying to change the unsolved faces breaks the existing ones.&lt;/p&gt;
&lt;h2&gt;Encapsulation&lt;/h2&gt;
&lt;p&gt;An interesting fact about HDD drives is they have their own cache where data that’s accessed frequently is retrieved from it. But this is transparent to applications using the HDD.&lt;/p&gt;
&lt;img src=&quot;hdd.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;The HDD itself has a printed circuit board and a controller and it communicates via the SATA interface.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Breaking The Frontend Monolith]]></title><description><![CDATA[A common theme on the blog is the practicality of approaches (and avoiding development dogma). For example,  Elm is a great technology stack…]]></description><link>https://florintoader.me/2022-10-07-microfrontends/</link><guid isPermaLink="false">https://florintoader.me/2022-10-07-microfrontends/</guid><pubDate>Tue, 10 Oct 2023 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;A common theme on the blog is the practicality of approaches (and avoiding development dogma). For example,  Elm is a great technology stack. Still, it probably won’t be on most companies’ adoption lists because technologies like React or Angular are much more popular, and it’s easier to find developers. It’s also much more likely that those technologies will be supported in the future. Likewise, even though microservices are very popular, most projects won’t start out using a microservice architecture.&lt;/p&gt;
&lt;h3&gt;The Hybrid Monolith / Microservice Approach&lt;/h3&gt;
&lt;p&gt;A typical pattern encountered in the wild is the hybrid monolith + satellite microservices approach. This usually occurs something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A company starts out with a new product, and even though care is taken to split the app into modules, there are usually dependencies between modules - for example, code that hits the same database tables.&lt;/li&gt;
&lt;li&gt;A decision is taken to move to a microservice architecture as the product team grows.&lt;/li&gt;
&lt;li&gt;The team attempts some refactoring and isolates some parts of the monolith into individual microservices.&lt;/li&gt;
&lt;li&gt;New functionality will be developed as new microservices.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, a very simple schematic for an online store might look like this:&lt;/p&gt;
&lt;img src=&quot;satelite.svg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;A common problem with breaking up modules into microservices is transactions, because even if individual pieces of code from various modules don’t call each other direcetly, they can still share data and trigger transactions in the database. And with microservices, transactions become distributed. And distributed transactions are hard.&lt;/p&gt;
&lt;h3&gt;Microfrontends&lt;/h3&gt;
&lt;p&gt;Microfontends, as their name suggests, are the front-end equivalent of microservices.&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.youtube.com/embed/BuRB3djraeM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;p&gt;Dan Abramov (of Redux fame) famously said he doesn’t understand them. He also said that they can be replaced with a sound component system.&lt;/p&gt;
&lt;img src=&quot;dan.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;One could, of course, point out that microservices can be replaced with a sound module system for a backend API that doesn’t allow us to deploy the modules individually very quickly, nor is interoperability between different technologies easy.&lt;/p&gt;
&lt;p&gt;Polyglot programming is touted as one of the advantages of microservices, but just because you can do something doesn’t mean you should. You almost certainly don’t want to start out with microservices written in distinct languages, but what’s great about them is you can integrate existing services written in different languages, which might occur as a result of acquiring another company (for example).&lt;/p&gt;
&lt;h3&gt;A Case Study&lt;/h3&gt;
&lt;p&gt;Imagine an application that was built with the legacy AngularJS API from Google. For any company that has invested years of development in a product built on it, the canceling of development on Agular by Google was terrible news. Working on discontinued tech isn’t great because browser support etc. is no longer provided. Patterns evolve, and it’s harder and harder to find developers willing to work on them. Let’s now say that the company decides to continue new development using React because it is the most popular technology out there and to use a bridge such as react2angular to bridge the connection between the apps. A potential approach would work as follows:&lt;/p&gt;
&lt;p&gt;The core is in AnguarJS.&lt;/p&gt;
&lt;img src=&quot;comparison.svg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;New routes/pages in the application are written in React and plugged in the. This is hardly ideal because Angular and React use vastly different architectural approaches.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AngularJS uses two way databing.&lt;/li&gt;
&lt;li&gt;React/Redux uses a single directional flow, with prop drilling and callbacks for passing the information back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The approach simply isn’t very good, so we’ll need another approach.&lt;/p&gt;
&lt;h3&gt;The Strangler Fig Pattern&lt;/h3&gt;
&lt;p&gt;This pattern was introduced by Martin Fowler and is an analogy for a type of plant that begins life as a vine growing alongside an older tree and as the vine grows, it spreads to completely consume and ultimately replace the host tree, leaving a new, strangler fig tree in its place.&lt;/p&gt;
&lt;p&gt;In the context of microservices, we begin by adding a gateway on top of the monolith, and then gradually splitting off pieces from the monolith. The gateway acts as an abstraction layer and takes care of routing the request of the client to the appropriate functionality route. Independent modules care be easily abstracted away, but what we care is shared state / transactions. Since it’s recommended that microservices own their own data, we need to switch to distributed transactions such as sagas. A message broker is crucial in decoupling microservices.&lt;/p&gt;
&lt;p&gt;Completely replacing a complex system can be a huge undertaking. Often, you will need a gradual migration to a new system, while keeping the old system to handle features that haven’t been migrated yet. However, running two separate versions of an application means that clients have to know where particular features are located. Every time a feature or service is migrated, clients need to be updated to point to the new location.&lt;/p&gt;
&lt;p&gt;Decoupling frontend applications isn’t that much different. Let’s analyze a very poopular solution, SingleSPA. SingleSPA acts like the frontend equivalent of a gateway — it’s the outer shell that loads the various frontend bundles. The various microfrontends run as independent applications - the only way to make them communicate is through shared cookies / storage or push notifications.&lt;/p&gt;
&lt;p&gt;While SingleSPA provides top level routing, each of the individual frontends will also have their own routing system. The MFEs are also isolated and will have their own reactivity system etc. A good practice to follow is to render based on route.&lt;/p&gt;
&lt;p&gt;A central tenet of distributed systems is each piece needs to own its own data. Also, with web applications (they don’t have to be distributed), it’s better that each route in a client application loads the data it needs based on the URL parameters, than to rely on global state and prefetched data. This makes deep linking and refreshing pages much easier to implement — refreshing is simply a matter of updating the page route with different parameters. Since each page / route loads its data, they can be easily split into independent MFEs. With AngularJS apps, that is usually the case.&lt;/p&gt;
&lt;p&gt;Note: global state objects such as the one introduced by Redux makes splitting React/Redux apps into smaller MFEs quite problematic. Before moving various pieces of the application into individual MFEs, it is recommended the frontend is decoupled from the global app state.&lt;/p&gt;
&lt;p&gt;MVVM applications like KnockoutJS are easy to split because components usually have their own state. Angular’s services makes it harder to do this, for example, but they can be copied between MFEs, if needed.&lt;/p&gt;
&lt;h3&gt;The Problem with Redux&lt;/h3&gt;
&lt;p&gt;Since Redux state is global, technically each component can both access and modify each piece of state. In the worst case scenario, we could have something like this:&lt;/p&gt;
&lt;p&gt;Redux is supposed to be your &lt;em&gt;view model&lt;/em&gt;, NOT domain model. The domain model resides on the server in the database.&lt;/p&gt;
&lt;p&gt;So this is correct:&lt;/p&gt;
&lt;p&gt;This isn’t.&lt;/p&gt;
&lt;p&gt;Unfortunately, if your application looks like the second, you are going to have a hard time breaking it up.&lt;/p&gt;
&lt;p&gt;In reality, most&lt;/p&gt;
&lt;p&gt;(next) Azure Hyprescale Named instances are a game changer&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Surprising Fact About Code Entropy In Large Projects]]></title><description><![CDATA[As most readers would probably guess, this is about messy code and technical debt. But the primary motivation isn’t to mention that software…]]></description><link>https://florintoader.me/2023-05-30-entropy/</link><guid isPermaLink="false">https://florintoader.me/2023-05-30-entropy/</guid><pubDate>Tue, 30 May 2023 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;As most readers would probably guess, this is about messy code and technical debt. But the primary motivation isn’t to mention that software projects have technical debt, but rather to explain why it pops up in more ways than one would normally would expect.&lt;/p&gt;
&lt;p&gt;I’m sure these things have came up for yout team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why do we need to touch functionality in the Catalog microservice? That’s been around for years and nothing chaned in that area.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why do you guys need to refactor Checkout component? Why wasn’t written properly from the beginning?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Intuition would say that if you haven’t touched a portion of the project code, that part would not incur technical debt, just as for example if you don’t go in a room in your apartment, that room would not get messy. If you don’t do anything on drive D, it doesn’t get defragmented, and so on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But this isn’t true about code.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;A Not So Technical In Entropy&lt;/h3&gt;
&lt;p&gt;Every one loves a nice late. And nice late art, fleeting as it is. We look at it, we enjoy it for a while, then we watch it disappear as we take our first sip of coffee.&lt;/p&gt;
&lt;img src=&quot;coffee.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;In fact we expect that it will eventually disappear even if you don’t touch the cup, because it’s the natural order of things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your apartment gets messier, not cleaner, without you putting in the effort.&lt;/li&gt;
&lt;li&gt;Your hard drive gets cluttered and defragmented.&lt;/li&gt;
&lt;li&gt;Objects like your phone get dings on them, they don’t get shiner and smoother.&lt;/li&gt;
&lt;li&gt;Flowers whither away and die.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second law of thermodynamics states that the total entropy of an isolated system always increases over time, where entropy is a measure of disorder or randomness in a system. The second law of thermodynamics isn’t really a law, like the 2nd law of thermodynamics. It’s probabilistic in nature.&lt;/p&gt;
&lt;p&gt;Yes, it happens to code, as we’ll see.*&lt;/p&gt;
&lt;h3&gt;The Red Queen&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Now, here, you see, it takes all the running you can do, to keep in the same place.” — Lewis Carroll&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the context of the story, Alice finds herself in a world where the rules of logic and physics are constantly shifting, and she struggles to keep up. The Red Queen, a representation of the ever-changing nature of the world, explains to Alice that in this topsy-turvy place, even staying still requires constant effort. The broader significance of the quote lies in its applicability to the human experience. In today’s fast-paced and ever-changing world, we often find ourselves running just to stay in the same place. The industries we work in, the technologies we use, and the social norms we navigate are constantly evolving, leaving us with the constant challenge of adapting and re-skilling to keep up.&lt;/p&gt;
&lt;p&gt;This concept gets brought up in evolutionary biology, for example. But it’s also true for code, because technology evolves. Browsers evolve. Frameworks evolve. Libraries are no longer mantained and so on. Many times, the issue is that new versions of libraries might not be backwards compatible like React Router 5. Even if you don’t need the new functionality, it is still a good idea to keep the node version your are supporting and so forth, so you will need to udpate your dependencies.&lt;/p&gt;
&lt;h3&gt;Code Patterns (And Fragmentation)&lt;/h3&gt;
&lt;p&gt;There’s a lot of debating around the merits of various architectures, like MVC vs. minimal APIs, Clean Architecture vs. just regular n-tier, etc., but I think one aspect that gets brought up less is the fact that they are about enforcing consistent patterns in the application. As a developer, it is important to be able to understand and find code easily. Ideally, you want to be able to be able to understand the code by reading it, without having to debug. True, the fact that these patterns enforce high cohesion and low coupling also helps.&lt;/p&gt;
&lt;p&gt;Ultimately, it’s about mental models and compartimentalization. Let’s use a simple analogy of cabinets and drawers.&lt;/p&gt;
&lt;img src=&quot;clean.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;You want to be able to find an object easily, so you are organizing your drawers based on a set of rules. Over time, with use, especially if you’re not being diligent, things will get messier. But there’s another aspect: the number of objects you have increases, you might want to throw some things, so patterns become outdated.&lt;/p&gt;
&lt;p&gt;The company you work for is a successful bookstore a,d it’s 1995. And because it’s so successful, the stakeholders want to expand the product to be able to sell more products, not just books. The developers will have to make changes in the code.&lt;/p&gt;
&lt;p&gt;This might look familiar.&lt;/p&gt;
&lt;img src=&quot;amazon.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Over time, your domain model expands and changes. In the case of amazon, sau they want to go from selling &lt;code&gt;Books&lt;/code&gt; to any product.&lt;/p&gt;
&lt;p&gt;Here’s an example of the AdventureWorks database from 2016.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;export &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Book&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Guid&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Title&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;decimal&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Price&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to support regional pricing, for example, this needs to be changed. If you want to support multiple pricing regions, you might want to&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;export &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Pricing&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;BookId&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;RegionId&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A key takeaway is as the domain model evolves, and patterns emerge, you also need to go in and modify existing code.&lt;/p&gt;
&lt;p&gt;Let’s say you now want to support multiple types of products.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;abstract&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Product&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Guid&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Description&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this widely simplifies things.&lt;/p&gt;
&lt;img src=&quot;adv.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;This isn’t even a particularly complicated database.&lt;/p&gt;
&lt;p&gt;Over time, keeping code clean requires refactoring, extracting abstract base classes, renaming properties and so forth.&lt;/p&gt;
&lt;p&gt;In Domain-Driven Design (DDD), ubiquitous language is a central concept that refers to a shared vocabulary used by everyone involved in a project, including developers, domain experts, and other stakeholders. This common language ensures that everyone understands the domain concepts in the same way, eliminating ambiguity and promoting clear communication. Ubiquitous language is a powerful tool that can help to improve communication, understanding, and model fidelity in DDD projects. By investing in the development and use of a shared language, teams can build more effective and adaptable software solutions.&lt;/p&gt;
&lt;h3&gt;Modules / Microservices&lt;/h3&gt;
&lt;p&gt;Since changing existing code implies a higher cognitive load than adding new code, many times developers will just add new properties, new modules, or entire new microservices, where they could have probably justchanged existing code. This can happen for backwards compatibility purposes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adding , a lot of the time is easier than modyfing existing code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With microservices, people might not even be aware of existing functionality. And it becomes apparent over time that things are duplicated, and that some kind of restructuring / reorganization is needed.&lt;/p&gt;
&lt;p&gt;Changing the code isn’t &lt;em&gt;that&lt;/em&gt; hard. Database migrations are a different story altogether, because you are dealing with people’s data.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why It's So Hard To Get Estimations Right?]]></title><description><![CDATA[The estimation proces and estimation related time pressure are probably some of the most contentious aspects of software development, and it…]]></description><link>https://florintoader.me/2022-05-30-estimations/</link><guid isPermaLink="false">https://florintoader.me/2022-05-30-estimations/</guid><pubDate>Mon, 30 May 2022 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;The estimation proces and estimation related time pressure are probably some of the most contentious aspects of software development, and it is usual for project managers to try to push down initial estimations made by developers, either because of pressure placed on themselves by varios stakeholders or because they know that tasks tend to take up the whole allotted time (because of developer procrastination), or both. To make matters worse, a whopping 70% of projects are considered “failures” based on initial targets. Even if the teams use agile methodologies, a large number of the sprints will fail to meet their story point target.&lt;/p&gt;
&lt;h3&gt;An All Too Familiar Story&lt;/h3&gt;
&lt;p&gt;The Sydney Opera house is such an iconic building that for many people it’s the first thing that comes to mind when they think of Australia’s famous city, yet not many are aware of its troubled history and how it came to be built. In 1995, the then prime minister Joseph Cahill launched an international design contest and after reviewing 233 entries from architects in thirtytwo countries, Danish architect Jørn Utzon was declared the winner, despite the fact that he simply entered a collection of pencil sketches outlining only the shape of the building.&lt;/p&gt;
&lt;img src=&quot;sketch.jpeg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;There were no interior plans, or plans for the support structure. Nevertheless, based on Utzon’s vision, the Australian government gave the construction works the green light, even before the schematics could be finalized, in order to capitalize on the existing enthusiasm and political support for the project. Little would they know that the project would exceed the budget by a factor of ten, and the whole process would take ten years, more than the three initially devised.&lt;/p&gt;
&lt;p&gt;To maximize time, the support columns were built before the design of the roof was finalized. And once the design was completed, the columns proved too weak to support it, so all of them had to be removed and replaced. So why did the roof design take so long? Since such a structure had never been built before, the engineers didn’t know how to go about it, and no less than 14 designs had to be proposed before settling on the final one, a design that would be feasible.&lt;/p&gt;
&lt;p&gt;The opera house scenario bears a lot of similarities with a lot of software projects. These start with the ideation phase, and then investors are keen to move fast to capture a market segment, since agile methodologies very popular right now. Let’s examine some concepts involved.&lt;/p&gt;
&lt;h3&gt;Brook’s Law&lt;/h3&gt;
&lt;p&gt;In his famous book, The Mythical Man Month, Fred Brooks argues that adding developers to a late project makes it even more late (which has since came to be known as Brook’s law).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Another way to put it is, if a woman can deliver a baby in nine months, it doesn’t mean that three women can deliver a baby in three months.&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;dilbert.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Throwing more people at a problem is one of the most common productivity traps that you can fall into, and not just because of the increase in coordination efforts. Some tasks cannot be partitioned effectively and don’t scale well with more developers. In fact, attempting to do it makes matters worse because there is now communication overhead, potential blocking and merging conflicts, etc.&lt;/p&gt;
&lt;p&gt;Like communication between components, the number of pathways scales with O(n^2). It also takes quite a bit of time for developers to become productive on a specific project if they aren’t familiar with it, and they will need support, which takes away productive time from the experienced devs.&lt;/p&gt;
&lt;h3&gt;Exactly Predicting The Behavior Of Nonlinear Systems Is Hard&lt;/h3&gt;
&lt;p&gt;Let’s consider a very simple physical system, the double &lt;a href=&quot;https://en.wikipedia.org/wiki/Double_pendulum&quot;&gt;pendulum&lt;/a&gt;. Even if this is a system that’s very simple and its behavior is fully deterministic (we can write down the equations of motion), its time evolution is chaotic.&lt;/p&gt;
&lt;img src=&quot;chaos.jpeg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Teams of developers are complex systems. Communication between team members, dependencies, etc., all play a role, making exact progress tracking difficult, so a team behaves as a chaotical physical system in many ways.&lt;/p&gt;
&lt;p&gt;This is not to say we can’t say anything about the system, but there will be a considerable degree of uncertainty.&lt;/p&gt;
&lt;h3&gt;The Dunning Kruger Effect And Optimism Bias&lt;/h3&gt;
&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;i&gt;The Dunning–Kruger effect is a cognitive bias whereby people with low ability, expertise, or experience regarding a certain type of a task or area of knowledge tend to overestimate their ability or knowledge. Some researchers also include in their definition the opposite effect for high performers: their tendency to underestimate their skills. The Dunning–Kruger effect is usually measured by comparing self-assessment with objective performance.&lt;/i&gt;&lt;/p&gt;
&lt;!-- &lt;img src=&quot;dunning.svg&quot; class=&quot;img&quot; /&gt; --&gt;h
&lt;p&gt;We tend to be overly optimistic when we don’t know enough about a certain subject. Also when doing estimations, even if devs estimate in story points, they think in time and revert back to storypoints — and they usually assume the best outcome. However, in real life unexpected things happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They might get a spec from the designer, only to find out mid-estimation that the UX design doesn’t translate well into CSS (more on that later).&lt;/li&gt;
&lt;li&gt;They might get a spec from the product owner and implement it, only to find that the spec is incomplete or the PO meant something else in the spec (because of inconsistent domain language).&lt;/li&gt;
&lt;li&gt;Or that the implementation actually requires a complicated database migration that wasn’t factored in.&lt;/li&gt;
&lt;li&gt;Or that breaking changes / major refactoring is required midway through implementation.&lt;/li&gt;
&lt;li&gt;They might implement the happy path, but miss edge cases, only for the testers to pick them up.&lt;/li&gt;
&lt;li&gt;In the process of implementation, they might find bugs in some of the libraries they are using, or simply that the libraries don’t support what they are trying to do.&lt;/li&gt;
&lt;li&gt;After implementing the functionality, the performance might not be acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When estimating, there’s a natural tendency amongst most developers to think they can go from start to finish in a straight line, but that’s rarely the case. You might get to where you think you’re 90% done, only for you to discover there’s another 90% to go (to paraphrase John Carmack).&lt;/p&gt;
&lt;p&gt;To use the construction analogy, a metaphor for the path a developer would take is a windy mountain road. When attempting to build such a road, it would be unrealistic to assume you are going to go in a straight line and some prospecting would be needed.&lt;/p&gt;
&lt;img src=&quot;winding.jpeg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;If developers don’t know enough about how to tackle a piece of functionality, they will not be able to properly estimate it, is which case a technical user story (or spike) needs to be scheduled before the actual implementation. Spikes come from Extreme Programming (XP), are a special type of user story that is used to gain the knowledge necessary to reduce the risk of a technical approach, better understand a requirement, or increase the reliability of a story estimate. A spike has a maximum time-box size as the sprint it is contained in it. At the end of a sprint, the spike will be determined that is done or not-done just like any other ordinary user story.&lt;/p&gt;
&lt;p&gt;Estimation is usually done as a team during the planning phase of the sprint, but there will be developers that specialize in different areas of the application, yet everybody will be required to provide an estimation (usually in the form of story points). Somebody that’s very familiar with the code in one area might come up with a higher estimation (because they understand the risks or potential complications inolved), head but succumb to team/peer pressure from the team to revise their estimation lower, because they are in the minority. Sometimes developers might pretend to believe that something is easy knowing it reflects well on them and it isn’t them who will build that piece of functionality (which is a form of office politics).&lt;/p&gt;
&lt;h3&gt;Finessing UX Is One Of The Most Time Consuming Aspects Of Development&lt;/h3&gt;
&lt;p&gt;The output of a designer (using tools like Adobe XD or Figma) will usually not translate directly 1:1 to CSS / HTML because design tools tend to use absolute positioning, whereas HTML uses a flowing layout. What usually ends up happening is the output is subtly different from what the designer expects, which means they will come back with changes.&lt;/p&gt;
&lt;p&gt;In some cases, it is possible to do them; in other cases, a compromise will have to be reached, which takes time, and several iterative steps might be needed.  Another issue is developers tend to think in components, and when using a framework such as React, they will have a set of building reusable blocks already prebuilt. Designers focus more on UX and that might not translate well into reusable components. Communication and collaboration is key to ensure that designers don’t come up with a design that isn’t pheasible.&lt;/p&gt;
&lt;h3&gt;Time Based Estimations Are Flawed&lt;/h3&gt;
&lt;p&gt;First of all, developers don’t work full eight hours per day. This is quite self-explanatory, and most teams consider effective work to be six hours per day, but even this is inaccurate. In his book The Shallows: What The Internet Is Doing To Our Brins, Nichlas Karr explains how the advent of the internet, multi-tasking, and social media has changed how our brain works.&lt;/p&gt;
&lt;p&gt;Since a lot of the applications we use are designed to be addictive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking email.&lt;/li&gt;
&lt;li&gt;Checking social media.&lt;/li&gt;
&lt;li&gt;Receiving error log notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being interrupted by coworkers on Slack.&lt;/li&gt;
&lt;li&gt;Working from home poses new challenges — like being interrupted by family members.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It takes an average of about 25 minutes (23 minutes and 15 seconds, to be exact) to return to the original task after an interruption, according to Gloria Mark, who studies digital distraction at the University of California, Irvine. Multiple studies confirm this, so it’s safe to say that the actual effective time spent coding is significantly less than six hours.&lt;/p&gt;
&lt;p&gt;When we do estimations, we need to consider relative ones. So a story point should not be defined in time but rather in relation to another user story. This way we can escape the pitfall of unreliable time-based estimations.&lt;/p&gt;
&lt;p&gt;Also, if you are doing &lt;a href=&quot;https://en.wikipedia.org/wiki/Planning_poker&quot;&gt;planning poker&lt;/a&gt;, you might have noticed that the numbers on the cards (roughly) follow the Fibonacci sequence. As user stories get bigger, the uncertainty factor also gets larger, and things can spiral out of control. It is recommended to use a threshold for splitting stories into smaller ones — it doesn’t matter what the value is, it might be 5, it might be 20. It indicates that a story might be too big to estimate properly and should be an epic instead, or just several smaller user stories.&lt;/p&gt;
&lt;h3&gt;In Closing&lt;/h3&gt;
&lt;p&gt;There are several things teams can do in order to improve estimates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a strict domain language — this way important details aren’t lost in translation between product owners and developers. Don’t user interchangable terms such as “account” or “user”, as they might refer to different things.&lt;/li&gt;
&lt;li&gt;Make sure stakeholders understand the value of spikes — yes, there’s upfront cost to doing them, but it’s worth it in the long run.&lt;/li&gt;
&lt;li&gt;Get your designers on board with Atomic Design. If they are familiar with CSS and HTML, even better.&lt;/li&gt;
&lt;li&gt;Before building UI pages, get into the habit of first indentifying and building the needed components.&lt;/li&gt;
&lt;li&gt;Use Storybook to test these components in isolation.&lt;/li&gt;
&lt;li&gt;Use a self management technique like Pomodoro to manage your time, and work in uninterupted bursts.&lt;/li&gt;
&lt;li&gt;Resist the urge to go to time based estimations and always resort to relative comparisons between user stories: ask questions like “do you feel this 3 point user story is three times as complex as this one which is only 1 SP?“.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[You Probably Don't Need CQRS]]></title><description><![CDATA[CQRS has been popular for quite a few years (more than a decade old at this point), and while it’s no longer in the hype phase of adoption…]]></description><link>https://florintoader.me/2022-02-27-cqrs/</link><guid isPermaLink="false">https://florintoader.me/2022-02-27-cqrs/</guid><pubDate>Sun, 27 Feb 2022 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;CQRS has been popular for quite a few years (more than a decade old at this point), and while it’s no longer in the hype phase of adoption, it still gets brought up quite a bit during architectural discussions for new projects (usually in conjunction with microservices). A few years after the pattern became popular, there was mounting criticism against it, mainly because of the complexity it introduces - with critics citing it as a typical example of over-engineering / premature optimization. As with most new technologies, this is captured very well by the Gartner hype cycle graph.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;hype.png&quot; class=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The adoption curve for microservices was similar: they were initially everywhere, then there was a backlash against the approach, and eventually teams began using them more judiciously. This pattern is typical for many new frameworks as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Phase 1:&lt;/strong&gt; Hey, look, a new shinny toy is out—I want to play with it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phase 2:&lt;/strong&gt; OK, this isn’t really what I expected, it’s really bad.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phase 3:&lt;/strong&gt; Maybe we shouldn’t have used it for everything, but it does have a place for certain usecases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dismissing CQRS out of hand would be a mistake however, as it does serve a purpose, albeit a very specific one. The purpose of this article is to give a birds-eye view of the pattern, encourage its use where it’s suitable, and potentially dissuade developer teams from adopting it where it isn’t.&lt;/p&gt;
&lt;h3&gt;Architecture&lt;/h3&gt;
&lt;p&gt;Before CQRS we had CQS (Command Query Segregation) which is a pattern that can be attributed to Bertrand Mayer. You are probably using this pattern without even know you are — in a nutshell it posits that asking a &lt;em&gt;question shouldn’t change the answer&lt;/em&gt;. This means you don’t want a method to mutate your state and return a value at the same time.&lt;/p&gt;
&lt;p&gt;CQRS stands for Command Query Responsibility Segregation. It means that the read and write parts of the application are separated. Here are high-level schematics of the topologies of the two architectures, presented side by side.&lt;/p&gt;
&lt;img src=&quot;x.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;At first look, CQRS looks significantly more complicated than the standard approach because not only are there two pipelines now, it also involves using two data stores. We’ll clarify the purpose behind this in a moment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a general rule of thumb, applications involve significantly more reads than writes.
Also, it’s not possible to optimize our data model for reads and writes at the same time. Themore
we imporove on read speed, by way of indexes, the slower the inserts become. Another approach to speed up reads is
to denormalize your data, to avoid having to perform costly joins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A Typical Example&lt;/h3&gt;
&lt;p&gt;Let’s look at a real world example: a post on social media has a series of comments but do you want to  tie those comments to the post object or to the user making the post? If so, how do we scale? CQRS can be a solution here - in our view cache, we can duplicate the comments, one time for the article and another time for the user’s history actions. A notification can be sent to update the cached view.&lt;/p&gt;
&lt;p&gt;Let’s look at a case where this might be needed:&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;feed.png&quot; class=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So why not use a caching solution instead? The core value proposition of CQRS is the decoupling of the view model and the domain model in a distributed application.&lt;/p&gt;
&lt;p&gt;For the sake of argument, let’s consider that our application uses at least dozens of servers, which means we need a scaling solution for it. A typical horizontal scaling strategy would be to partition the data based on user id, but the question then becomes: &lt;em&gt;do we tie the comments to the user making them, or to the post which is in turn tied to another user. Also bear in mind that we want to avoid querying multiple nodes.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The domain model is the primary source of truth, denormalized, and usually stored in a relational database.&lt;/li&gt;
&lt;li&gt;The view model contains data duplication and is normally stored in a fast document database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This approach naturally lends itself to a microservice solution, where we can scale different parts of the application. Scaling out a relational database is complicated. Scaling out denormalized views is not.&lt;/p&gt;
&lt;p&gt;There is significant overhead associated with implementing CQRS and in most cases, there’s no need to separate the reading and writing pipelines. And in fact, it can be argued that the main advantage of CQRS is the fact that we have two storage formats, one that makes reading faster and one that denormalizes the data, not two pipelines. The former can be seen as a view model and the latter should be the primary source of truth.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In a nutshell, CQRS allows you to take a distributed data model and agregate it in one or more view models (caches). An analogy that can be used here, albeit not a perfect one, is the difference between a primary database and star-schema databases, which are optimized for reports.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;A Primer On Event Sourcing&lt;/h3&gt;
&lt;p&gt;The fundamental idea behind event sourcing is that the state of your application is given by a set of event objects. Let’s use an online store as an example.&lt;/p&gt;
&lt;p&gt;We start with an empty catalog, and we define events such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding support for new item types in the store catalog.&lt;/li&gt;
&lt;li&gt;Removing items from the supported catalog.&lt;/li&gt;
&lt;li&gt;Adding stock.&lt;/li&gt;
&lt;li&gt;Selling items.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Auditing is important when it comes to a wide variety of applications. You might be a financial controller. You might be maintainging an inspections sofwware and an audit trail is mandatory.&lt;/p&gt;
&lt;!-- The primary advantage here is we have a log of actions and this can be used for accounting purposes. Event sourcing  --&gt;
&lt;p&gt;If your application is using “event sourcing”, then it’s also customary to use CQRS.&lt;/p&gt;
&lt;h3&gt;Materialized Views&lt;/h3&gt;
&lt;p&gt;This isn’t a new concept. It has been around in relational database systems for quite some time now. The idea behind it was always to precompute the result of queries in order to improve response time. Sure, adding indexes can go a long way in improving read performance (at the expense of write performance), but if you’re reading the same data set again and agin, it makes sense to store it. In fact, adding views to your application might be one of the most efficient ways to improve performance.&lt;/p&gt;
&lt;p&gt;When we’re dealing with cloud native applications / distributed transactions etc., things are a bit more complicated. There is still value in the concept, but we can’t rely on our RDBMS system to do it for us — we’ll need to do it ourselves. A RDMS wil rely on its internal system of triggers — we’ll need a messaging system.&lt;/p&gt;
&lt;p&gt;As mentioned in other articles, distributed systems rely heavily on denormalization / data duplication. So even if we don’t need to keep a ledger to track our actions, thing such as “fan-out” (distributing data in the feed of various users on social media on say Twitter require data duplicationd).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have the “primary source of truth”, which his what an individual user posted.&lt;/li&gt;
&lt;li&gt;And you also have a “materialized view”, which is the individual user’s feed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an approach, CQRS is useful when we want to achieve these “cloud native” materialized views.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;As with most debates,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The decision to use CQRS should not be taken lightly, because it entails significant development cost.&lt;/li&gt;
&lt;li&gt;It most likely makes sense to use it if you’re planning to scale your storage solution.&lt;/li&gt;
&lt;li&gt;CQRS can be used on a per microservice basis - not all microservices need to use it.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Execution Contexts, Scopes and Closures]]></title><description><![CDATA[Closures are probably one of the most unintuitive features for newcomers to Javascript, especially if they come from languages such as Java…]]></description><link>https://florintoader.me/2022-02-26-js-closures/</link><guid isPermaLink="false">https://florintoader.me/2022-02-26-js-closures/</guid><pubDate>Sat, 26 Feb 2022 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;Closures are probably one of the most unintuitive features for newcomers to Javascript, especially if they come from languages such as Java or C#. The notion of a function within another function itself isn’t hard to understand, the significant hurdle in understanding comes with preserving the lexical environment around these functions once the parent function has finished executing. There are also quite a few articles that use misleading terminology — for example, context versus execution context, lexical environment versus scope, etc. We’ll aim to clarify the terms.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An important concept to mention is that functions are first-class citizens in Javascript, whereas in C# / Java, it’s the classes that are first-class citizens. So even though a language like C# does support closures, they use some magic under the hood, as we’ll explain later.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;p&gt;Let’s look at what &lt;em&gt;scope&lt;/em&gt; means first. Scoping simply means reducing the visibility of variables based on the block where they have been declared. The JS engine recognizes three types of scopes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The global scope.&lt;/li&gt;
&lt;li&gt;Function scopes.&lt;/li&gt;
&lt;li&gt;Block scopes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can consider the following piece of code:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; arrayItems &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;logArrayItems&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;item&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;arrayItems&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Array item &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt; is &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;item&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;++&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;logArrayItems&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how it looks like:&lt;/p&gt;
&lt;img src=&quot;stack.svg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;In this case, the global scope contains &lt;em&gt;arrayItems&lt;/em&gt;, &lt;em&gt;i&lt;/em&gt; is in the function scope and &lt;em&gt;message&lt;/em&gt; is in the block scope. So far, this is intuitive, and it’s not that much different than what we would expect from a language like C#, Java, or C.&lt;/p&gt;
&lt;p&gt;Scopes form a chain. Variable resolution works as follows: if a variable isn’t available in the current scope, it goes up the chain.&lt;/p&gt;
&lt;h3&gt;Execution context&lt;/h3&gt;
&lt;p&gt;The term &lt;em&gt;context&lt;/em&gt; refers to what the &lt;em&gt;this&lt;/em&gt; keyword points to, which is different from &lt;em&gt;execution context&lt;/em&gt;, as we will see in a moment. Since JS is not an OOP imperative language (classes are just syntactic sugar), the value of the &lt;em&gt;this&lt;/em&gt; keyword depends on how the function is called (see &lt;em&gt;bind&lt;/em&gt; or &lt;em&gt;apply&lt;/em&gt;), but explaining it is beyond the scope of this article.  The &lt;em&gt;execution context&lt;/em&gt; is a general abstract term and refers to several things taken as a whole:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The value of &lt;em&gt;this&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The lexical environment in which the code runs in — in the case of functions, that’s the outer scope.&lt;/li&gt;
&lt;li&gt;The code/function’s own variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the JS engine starts a script, it creates something which is called a &lt;em&gt;global execution context&lt;/em&gt;. Each execution context has two phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The creation phase.&lt;/li&gt;
&lt;li&gt;The execution phase.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Javascript also introduces a concept called “hoisting”. This refers to variables being available before being declared, but contrary to what the term would intuitively suggest, nothing is actually being hoisted. Instead, what happens is the JS engine first does a pass through the code and determines which variables are declared and assigns an undefined value for them. The term “hoisting” comes from the illusion this gives that the declaration has been moved to the beginning of the block.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;showXandY&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;x is &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;y is &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;y&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;showXandY&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// we get undefined and undefined&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;12&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; y &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;14&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;showXandY&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// here, we get 12 and 14&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also we have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A global execution context.&lt;/li&gt;
&lt;li&gt;A function execution context.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;b&gt;Remember:&lt;/b&gt; scope refers to the visibility of the variables, and context refers to where the code is executed.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Closures&lt;/h3&gt;
&lt;p&gt;Let’s look at a more complicated example:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; name &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;global variable&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;f1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;createClosure&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;f2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;starting...&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;f1&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;f2&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; g1 &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;createClosure&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; g2 &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;createClosure&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;b&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;c1&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;c2&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seriously complicates things. First, we can see we can see thate &lt;em&gt;createClosure&lt;/em&gt; returns another function — so they really are objects. We create two instances, &lt;em&gt;g1&lt;/em&gt; and &lt;em&gt;g2&lt;/em&gt;. The first question would be which &lt;em&gt;name&lt;/em&gt; variable the &lt;em&gt;f1&lt;/em&gt; function “sees”, because it’s being run from &lt;em&gt;createClosure&lt;/em&gt;, but it’s being declared outside. The answer is it seems the variable in the global scope.&lt;/p&gt;
&lt;p&gt;If we run this, we get:&lt;/p&gt;
&lt;pre class=&quot;shiki-unknown&quot;&gt;&lt;code&gt;starting...
outer variable
a
starting...
outer variable
b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s interesting is that &lt;em&gt;f2&lt;/em&gt; is able to display the value of the name parameter even though the &lt;em&gt;createClosure&lt;/em&gt; function has finished executing. This aspect captures what closures are all about.&lt;/p&gt;
&lt;p&gt;If a function returns a value that is another function (functions are objects), the JS engine creates a “closure” around it and preserves the returned function’s lexical environment that the inner function lives in at the moment it was created. This has several potential uses and also side-effects — a simple side effect is the one mentioned before — since React components are closures, they keep the value of &lt;em&gt;state&lt;/em&gt; at the moment the function was called (it acts as a render function), you cannot use a global state object per component and you cannot merge new partial state asynchroniously because other actions might have changed the state in the meantime. A simple example of closure can be the result returned by a React higher order component.&lt;/p&gt;
&lt;h3&gt;Closures For Private Fields&lt;/h3&gt;
&lt;p&gt;Closures are also interesting because they can be used to emulate private class data. While there are classes in JS, they are simply syntactical sugar over prototypical inheritance, and you can’t have private fields. Normally most developers wouldn’t need to know how closures work, but given how popular React’s functional components are (which make use of closures) and the amount of frustration not understanding them, a guide to explain them in detail is needed. With the advent of TypeScript however, we don’t need to do this.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;firstName&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; lastName&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; age&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;_age&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;age&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;incrementAge&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;_age&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;+=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;showStats&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;`${&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;firstName&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;lastName&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;, age &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;_age&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;incrementAge&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;showStats&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; person1 &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;John&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Doe&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;32&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; person2 &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Jane&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Doe&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;24&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(person1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;incrementAge &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; person2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;incrementAge) &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try to unpack what happens here. The methods &lt;em&gt;incrementAge&lt;/em&gt; and &lt;em&gt;showStats&lt;/em&gt; live inside the &lt;em&gt;Person&lt;/em&gt; function scope. They “see” &lt;em&gt;firstName&lt;/em&gt;, &lt;em&gt;lastName&lt;/em&gt;, &lt;em&gt;age&lt;/em&gt; and &lt;em&gt;_age&lt;/em&gt; (which acts as a private variable). They constitute the lexical environment for these functions. When the outer function returns an object referencing these functions (and again keep in mind they are simply objects).&lt;/p&gt;
&lt;h3&gt;A Look At C# Closures&lt;/h3&gt;
&lt;p&gt;To illustrate how remarkable closures are, it’s worth pointing out what the .NET runtime does to support them (they are only supported from C# 7.0 and up).&lt;/p&gt;
&lt;p&gt;With C# / VB.NET in general, there has been a move towards a hybrid imperative/functional language, so support for “functions in functions” wasn’t unexpected. And, of course, scoping requires closures — so let’s look at how .NET achieves them.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;del&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F78C6C&quot;&gt;delegate&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  Console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;WriteLine&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;$&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;a is &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;del&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C# uses the concept of a “delegate” to refer function objects that can be passed around - they are essentially reference types. The problem with delegates is that they don’t have any state, so when the C# compiler detects a delegate that forms a closure returned to the outside scope, the function and its associated local variables are promoted to a compiler-generated class. The compiler then treats the delegate as a method in this class.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;CompilerGenerated&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;sealed&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; class &amp;lt;&amp;gt;c__DisplayClass0_0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;internal&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; void &amp;lt;M&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;b__0&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;        Console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;WriteLine&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;Format&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;a is {0}.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; x&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see from the .NET implementation, we really just have a function with some data.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Different Take On Handling Local State Using Hooks]]></title><description><![CDATA[When implementing simple React applications, Redux might cause significant overhead, and just using component state might be enough. There…]]></description><link>https://florintoader.me/2022-01-29-functional-state/</link><guid isPermaLink="false">https://florintoader.me/2022-01-29-functional-state/</guid><pubDate>Fri, 28 Jan 2022 21:39:37 GMT</pubDate><content:encoded>&lt;p&gt;When implementing simple React applications, Redux might cause significant overhead, and just using component state might be enough. There are however differences between class components and function components related to how hooks work, which we’ll look at next.&lt;/p&gt;
&lt;p&gt;With classes, component state is accessible via &lt;code&gt;this.state&lt;/code&gt;, and updating it (and triggering component rerendering) is done via &lt;code&gt;this.setState&lt;/code&gt;. In functional components, we use the &lt;code&gt;useState&lt;/code&gt; hook and instead of merging the object we’re passing in, the state is replaced. It can be used several times and the intention is to be used for each field we want to track — for example, if we have multiple inputs on the page, we can use the hook for the state of each one of them.&lt;/p&gt;
&lt;img src=&quot;img.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;On first look it seems there’s a simple solution - we can simply merge the state ourselves.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;loadSection1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Loading&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchSection1Data&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Loaded&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Error&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  }) &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;loadSection2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Loading&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchSection1Data&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Loaded&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      section2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;section2&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;requestState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Error&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  })&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where again &lt;code&gt;RequestState&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;RequestState&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;Null&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;Loading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;Loaded&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;Error&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve started both actions at the same time. The first action finishes the fetch, updates the state, and triggers a render. Then the second action finishes, but because the function creates a closure around the update method, so state refers to the value when the action started. This means that the second action that finishes will overwrite the results of the other one.&lt;/p&gt;
&lt;p&gt;What we is a mutable way of tracking the state. Luckily, React provides a useRef hook that allows us to keep a reference to an object on a per-component basis. The typical use case for it is to store references to UI elements but it can be used to point to any object, so we can store our updated state in it whenever any of the responses return.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setComponentState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;stateRef&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;current&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;stateRef&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;current&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, necause we find this functionality useful, let’s create a custom hook.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;useRef&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;react&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useComponentState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;internalRef&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useRef&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;internalState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setInternalState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;internalRef&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;current&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setInternalState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;internalRef&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;current&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newState&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;internalState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, this can be used in our component the same way we would use the regular &lt;code&gt;useState&lt;/code&gt; hook:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;StatefulComponent&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useComponentState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// we ca bind the state here&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;setState&lt;/code&gt; will trigger a component update.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Simplifying State Handling]]></title><description><![CDATA[In the previous example, we went over a global store app pattern that emulates Redux. The main advantage of this approach is familiarity…]]></description><link>https://florintoader.me/2022-01-17-simple-state/</link><guid isPermaLink="false">https://florintoader.me/2022-01-17-simple-state/</guid><pubDate>Sun, 16 Jan 2022 21:39:37 GMT</pubDate><content:encoded>&lt;p&gt;In the previous example, we went over a global store app pattern that emulates Redux. The main advantage of this approach is familiarity, meaning that developers can structure their projects using a similar folder/code structure. There is, however, an alternative approach popularized by  Svelte, which is less verbose. While this is a familiar approach, many developers feel that the single-store architectural approach leads to bad software patterns. Dan Abramov has famously likened asynchronicity and state mutations, yet having a global state object can easily lead to situations where existing functionality can rely on existing state (state that was fetched previously). Moreover, oftentimes users bookmark or refresh pages, which can lead to problems. Having a lot of stateful data can lead to brittle code because it relies on previously executed actions which might break the flow.&lt;/p&gt;
&lt;p&gt;(As a side note here, a lot of applications are clientside logic heavy and they do a lot of inner joins and computations where this information might be better sent to the server)&lt;/p&gt;
&lt;p&gt;One approach that client-side applications can borrow from server-side applications is to treat the URL as the current “state” and render solely based on that. That way, we ensure that the page always renders the same regardless of whether it was the result of client-side navigation or the user refreshing the page. An (imperfect) analogy that can be used here is that of pure functions - the result of the pure function always depends on the input parameters (in our case the URL), not some other application state. The analogy is imperfect because the page would of course render based on the server-side state. React’s functional components lend themselves well to this approach. We can use a simple example: imagine a page that displays products.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/products&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By default, the page would display a list of products on sale or popular products.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/products?search=searchterm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The following URL would show the user a search result list. Let’s consider the following scenario: a lot of sites allow the user to have a list of favorites. If a certain product is in the favorite list, the application shows an icon next to it. Instead of relying on a single global state object, we would have an individual store just for the product page that we would populate on URL navigation (which can be clientside or serverside).&lt;/p&gt;
&lt;p&gt;Our store uses the &lt;code&gt;useReducer&lt;/code&gt; hook for reasons explained in the following article. The aim is to create a personal organizer application that has two sections: notes and tasks. The note page and task page structure are similar, so we’ll present the code for notes as an example.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;useReducer&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;react&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Task&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TaskStoreState&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Task&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;any&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useLoginStore&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TaskStoreState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useReducer&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;reducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;addTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;ADD_TASK&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;removeTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;REMOVE_TASK&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;updateTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;UPDATE_TASK&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    actions&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;addTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;removeTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;updateTask&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;reducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TaskStoreState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;switch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;ADD_TASKS&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;newid&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;REMOVE_TASK&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;UPDATE_TASK&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[What If We Wanted To Use Hooks Instead Of Redux?]]></title><description><![CDATA[While the rumors about Redux’s demise are most likely mostly exaggerated, there is no doubt we can achieve a lot of the functionality it…]]></description><link>https://florintoader.me/2022-01-12-hooks-architecture/</link><guid isPermaLink="false">https://florintoader.me/2022-01-12-hooks-architecture/</guid><pubDate>Tue, 11 Jan 2022 21:39:37 GMT</pubDate><content:encoded>&lt;p&gt;While the rumors about Redux’s demise are most likely mostly exaggerated, there is no doubt we can achieve a lot of the functionality it provides with hooks. Also, as a rule of thumb, we should avoid using as many external libraries as possible because chances are they could become deprecated in the future. While using the &lt;span class=&quot;code&quot;&gt;useReducer&lt;/span&gt; hook is relatively straightforward, React doesn’t provide a prescription on how to structure a relatively large application. To make matters worse, virtually every blog article on the internet recommends using a different approach.&lt;/p&gt;
&lt;p&gt;Let’s first take a look at the Redux data flow.&lt;/p&gt;
&lt;img src=&quot;redux2.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;First of all, it’s worth pointing out that the data flow is unidirectional. The user can trigger actions from the UI, which act on the application state via a &lt;em&gt;reducer&lt;/em&gt;, which in turn triggers rerendering of the UI. The is aim to replicate this flow using the built in React functionality.&lt;/p&gt;
&lt;p&gt;With hooks, React provides powerful features when writing functional components, and it’s not opinionated on how you use them. The problem is, choosing the right approach can be tricky because there are so many permutations. Developers moving from .NET WebAPI or Rails (which are very opinionated in how you name your controllers and routes) to NodeJS / Express (which imposes no restrictions on how to structure your code) will find this approach very familiar.&lt;/p&gt;
&lt;p&gt;Another relatively new addition to React is the Context API. If you’re not familiar with what it is, it’s a way for components to avoid having to pass down props through complex component trees — a technique known as &lt;em&gt;prop drilling&lt;/em&gt;. React’s rendering engine knows to react to changes in the context state, just as it is able to respond to changes in component state or prop changes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We could have different contexts per route with separate data stores for each of them.&lt;/li&gt;
&lt;li&gt;We could use a single context per application, and each route can keep its state in a property of the single app state object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll go with option number two because that’s what Redux does, and most developers are familiar with that approach. The aim is to create a personal organizer application that has two sections: notes and tasks. The note page and task page structure are similar, so we’ll present the code for notes as an example.&lt;/p&gt;
&lt;img src=&quot;pic2.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Since we plan to lay the groundwork for a complex app, we’ll assume that this application has multiple &lt;em&gt;modules&lt;/em&gt;. Each module will have a &lt;em&gt;components&lt;/em&gt; folder, which contains the UI code, and a &lt;em&gt;store&lt;/em&gt; folder which contains the action creators and the reducer logic.&lt;/p&gt;
&lt;p&gt;The reducer created with the &lt;code&gt;useReducer&lt;/code&gt; hook works similar to a Redux reducer. It’s just a function that takes a &lt;em&gt;state&lt;/em&gt; object and an &lt;em&gt;action&lt;/em&gt; object, and based on that, it returns a new state object. One way of thinking about it is it’s a way of mutating state, but of course we’re not really mutate the existing state, but rather creating a new state object (immutability is one of the central tenets of functional programming).&lt;/p&gt;
&lt;p&gt;We’ll need to create reducer actions for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating a new note.&lt;/li&gt;
&lt;li&gt;Removing an existing note.&lt;/li&gt;
&lt;li&gt;Updating an existing note.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;NotesState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Note&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./types&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./actions&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;v4&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;uuid&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; initialNotesState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesState&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; []&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;notesReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;switch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;v4&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;!==&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;              &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;              title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;              description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;note&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have defined a reducer, we’ll want to create the equivalent of Redux’s action creators.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;react&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./types&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;../../types&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; ADD_NOTE &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; REMOVE_NOTE &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; UPDATE_NOTE &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;addNote&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;removeNote&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;updateNote&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, let’s have a look the &lt;em&gt;types.ts&lt;/em&gt; file.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./actions&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Note&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesState&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Note&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;typeof&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; ADD_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;typeof&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; REMOVE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;typeof&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; UPDATE_NOTE&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;description&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our application also has a &lt;em&gt;tasks&lt;/em&gt; section which has the same structure — actions, and a state reducer. Since the application uses a single data store, we need to combine both our reducers into a single one. We’ll create an &lt;em&gt;appReducer.ts&lt;/em&gt; file for this.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TasksAction&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; initialAppState &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; initialTasksState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; initialNotesState&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;combinedReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;notesReducer&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;NotesAction&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;tasksReducer&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TasksAction&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try to put it all together now. We need a way for the UI to be able to call our actions and to react to changes in the application state. We’ll use a global context that can be accessed from anywhere in the application via the useContext hook that will give the calling component access to the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The global state of the app.&lt;/li&gt;
&lt;li&gt;An execute method, which will allow it to trigger actions.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; React&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;useReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;react&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;ChildrenProps&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./modules/types&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; appReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialAppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;./appReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ExecuteFunc&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Promise&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;void&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppContextType&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ExecuteFunc&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Promise&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// eslint-disable-next-line @typescript-eslint/no-explicit-any&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; AppContext &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; React&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;createContext&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;any&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppContextType&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;AppContextProvider&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ChildrenProps&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useReducer&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;combinedReducer&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;initialAppState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;AppState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Dispatch&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;Promise&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;dispatch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;catch&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// take appropriate action and report the error&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;alert&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;The application encountered an error.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;AppContext&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Provider&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;{ &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;children&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;AppContext&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Provider&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll need to add the &lt;code&gt;AppContextProvider&lt;/code&gt; as the root component of the application. Then in a component, we can access the application state and the &lt;code&gt;execute&lt;/code&gt; method using the &lt;code&gt;useContext&lt;/code&gt; hook.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; execute &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useContext&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(AppContext)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;removeNoteClick&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteActions&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;removeNote&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;noteId&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; notes &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// rendering the notes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source code can be found &lt;a href=&quot;https://github.com/toaderflorin/hooks-store&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Hooks Can Be Confusing]]></title><description><![CDATA[React’s development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of libraries…]]></description><link>https://florintoader.me/2021-11-18-hooks/</link><guid isPermaLink="false">https://florintoader.me/2021-11-18-hooks/</guid><pubDate>Thu, 18 Nov 2021 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;React’s development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of libraries, and for quite some time it was ES5 only — ES6 support of course followed, but the team quite quickly realized that if a component doesn’t need to maintain an internal state, there’s no need for it to be a class, and one of the major additions of v14.0 were stateless functional components. Not long after, the &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;container / presentational pattern&lt;/a&gt; appeared, where the state changes would be handled in a wrapping class component, and the inner child component would handle the presentation part.&lt;/p&gt;
&lt;p&gt;The functional syntax became popular with quite a few developers — after all, languages like Elm are quite popular these days.&lt;/p&gt;
&lt;img src=&quot;hooks.jpg&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;The question then becomes: how does one keep the functional syntax and, at the same time, allows for the use of state in a component? The answer is, of course, hooks. Also, changing the syntax doesn’t mean the component state or lifecycle are going away.&lt;/p&gt;
&lt;p&gt;There’s a &lt;code&gt;useState&lt;/code&gt; hook, for example. There’s also a &lt;code&gt;useEffect&lt;/code&gt;, and we’ll look at both in a moment. Let’s consider a simple application that fetches some data from an API and then does something with it.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    isTasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useEffect&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// the empty dependency array indicates the effect runs on component mount &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #676E95; font-style: italic&quot;&gt;// and only once&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  [])&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;code&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;to&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;render&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing that’s very apparent with hooks is we no longer have lifecycle methods like &lt;code&gt;componentDidMount&lt;/code&gt; or &lt;code&gt;componentWillReceiveProps&lt;/code&gt;, so we need to rely on a different mechanism — the  &lt;code&gt;useEffect&lt;/code&gt; hook fills that role now. If we want to react to the component being mounted, we can pass in an empty dependency array. If we want to emulate the &lt;code&gt;componentWillReceiveProps&lt;/code&gt; we can pass in the props as dependencies.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    isTasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useEffect&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  [&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;code&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;to&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;render&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s worth pointing out that the way &lt;code&gt;useState&lt;/code&gt; works with hooks is different that the way &lt;code&gt;useState&lt;/code&gt; works with class components.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With class components, it merges the new state into the old state, via the JS spread syntax.&lt;/li&gt;
&lt;li&gt;With functional components, it simply replaces the state object.&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;useState&lt;/code&gt; multiple times in functional components and have different instances of state.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And extremely important, with functional components there is no &lt;code&gt;this.state&lt;/code&gt;. Also, functional components are &lt;em&gt;closures&lt;/em&gt;, which means they have their own lexical context, and so they capture the values of variables declared in the function when those functions were called. So in our case, when the response comes back from the server, the value of &lt;span class=&quot;code&quot;&gt;state` is the same as it was when the component was called. Typically, this wouldn’t be a problem, especially because you can use the &lt;span class=&quot;code&quot;&gt;useState&lt;/span&gt; hook multiple times, and you can have different disjointed pieces of state.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The main problem with this approach arises if you are trying to use one single view model object as state and merge new state prop values into it if you have to deal with concurrency.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The typical case in which this would happen is if you aren’t using a store manager like Redux, and use a &lt;a href=&quot;https://reactjs.org/docs/lifting-state-up.html&quot;&gt;lift state up&lt;/a&gt; approach. Typically, this would mean that you are usinng the root component, or the root component route as a state manager and you are using prop drilling and callbacks.&lt;/p&gt;
&lt;p&gt;So let’s illustrate the point. Let’s say that aside from tasks, we also want the user to be able to scribble down and manage notes, and we need to change the data we’re displaying when the currently logged in user changes.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notesLoading&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchNotes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getNotes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useEffect&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  [&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Notes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While not necessarily easy to spot, we now have a racing condition.&lt;/p&gt;
&lt;p&gt;We can change it like this.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;props&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setTasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;setNotes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchNotes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;api&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;getNotes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useEffect&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchNotes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  [&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasksLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;Notes&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notes&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;={&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;notesLoading&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  )&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are no longer merging the old state into the big state object, we no longer have the racing condition. This is a perfectly valid approach for fixing the problem, but unfortunately, it means we have lost the hierarchical nature of the state object (so we can no longer use it as a view model) — remember that when we are lifting the state to the parent component, we would like the structure of the object to reflect the child component hierarchy.&lt;/p&gt;
&lt;p&gt;A fundamental difference between the old approach and the new one is the addition of the &lt;code&gt;useEffect&lt;/code&gt; hook, which is called after the functional component has rendered, making it behave like the &lt;code&gt;componentWillReceiveProps&lt;/code&gt; function. This approach is interesting because using this method to make API calls (and therefore changing the state) leads to rerendering. Reacting to state changes in the application is generally considered bad practice because it can also lead to complicated dependency chains, making the code hard to follow. Infinite loops are also a common problem in code written by newcomers.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;useEffect&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;fetchTasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;currentUser&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling the &lt;code&gt;fetchTask&lt;/code&gt; method like this causes an infinite loop because it sets the &lt;code&gt;isLoading&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;, which triggers rerendering, which calls the effect again. In some cases, the dependency cycles might be more complicated: a parent component might trigger an effect in a child component, making the problem harder to diagnose. To make matters slightly worse is the fact that React’s strict mode triggers double rendering for debugging purposes (React tries to ensure your state changes are &lt;a href=&quot;https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation#:~:text=at%204%3A12-,12,as%20making%20a%20single%20request.&quot;&gt;idempotent&lt;/a&gt;, and don’t lead to infinite refreshing loops), which can make things extra confusing.&lt;/p&gt;
&lt;p&gt;To wrap up, while hooks are a welcome addition to React, the learning curve can be quite steep.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Reactivity And Immutability In React]]></title><description><![CDATA[Before getting into library-specific details, it’s worth starting with a definition of what constitutes reactivity. A typical example would…]]></description><link>https://florintoader.me/2021-11-05-immutability/</link><guid isPermaLink="false">https://florintoader.me/2021-11-05-immutability/</guid><pubDate>Fri, 05 Nov 2021 06:39:37 GMT</pubDate><content:encoded>&lt;p&gt;Before getting into library-specific details, it’s worth starting with a definition of what constitutes reactivity. A typical example would be an Excel spreadsheet: if a cell aggregates data from other cells, that cell instantly changes if we change a value in any of the aggregated cells. In reactive programming, if a variable A depends on B and C, a change in either B or C would also trigger a change in A. While there seems to be an ongoing debate whether React is truly reactive, there’s no doubt that the UI reacts to changes in the data model, even if parts of the model itself don’t react to other parts being changed, so from now on, we’ll consider this definition of reactivity.&lt;/p&gt;
&lt;p&gt;Since in most programming languages mutating an existing instance doesn’t notify other objects or the runtime of the change, a typical pattern is to use events or callbacks for this. As an example, Windows Presentation Foundation uses models that implement an interface called
&lt;span class=&quot;code&quot;&gt;INotifyPropertyChanged&lt;/span&gt; for data-binding and wraps class fields in getters and setters, and it’s the setter’s responsibility to fire change events. .NET provides a convenient base class object that implements the interface, so a typical observable view model would look like this:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ObservableViewModel&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ObservableObject&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;Field1&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;_field1&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;NotifyPropertChanged&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;field1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;set&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;_field1&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The WPF rendering system receives these events and then uses .NET’s reflection system to read the properties that are named like that. So if you are passing a different string in the notify event, it won’t work.&lt;/p&gt;
&lt;p&gt;VueJS does something similar, but it’s a little bit less transparent; it looks at the model the component was initialized with and then wraps the existing fields in getters and setters that also notify it. These wrappers aren’t directly visible to the user, which is why it is crucial to understand what the library does under the hood — adding a property to the model that wasn’t present when the component was initialized means that property isn’t observable.&lt;/p&gt;
&lt;p&gt;From the Vue docs:&lt;/p&gt;
&lt;img src=&quot;vue-reactivity.png&quot; class=&quot;img&quot; /&gt;
&lt;p&gt;Mutations play a central role when it comes to observability in these libraries, but React works a little bit differently because it is much more functional in nature. Rendering here is done by calling the setState method on a component, or the component receives new props from a parent. Of course, changing the whole thing is simple because react does a diff. But by using a little functional trick called &lt;em&gt;immutability&lt;/em&gt; in our code, we avoid even this diffing process.&lt;/p&gt;
&lt;p&gt;Let us use the customary task manager example and look at the following code:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskA &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;4b390f82-8b6f-4176-b28e-455ce9c24150&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Send email to John.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskB &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;32557639-ca7a-4188-868a-2b5938d2bd01&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  text: &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;Play foosball.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskC &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskA&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;This should be false.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskA &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskB)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;This should be true.&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskA &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; taskC)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This of course is nothing new because JavaScript doesn’t check the values of the fields, it checks the instances and in the case of person A and B we have two different instances of an object with fields of equal value.&lt;/p&gt;
&lt;p&gt;Let’s say we now have a method that is called &lt;code&gt;removeLastName()&lt;/code&gt;. In the case of mutable languages we could write something like this:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;completeTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;completed&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But functional languages prohibit mutations, and even if JavaSript allows them, if we want to abide by functional principles, we can write it like this instead:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;function&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;completeTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This not only encourages the use of function composition for calculating complicated things, but it also ensures that checking for equality is easy and fast. Since we are never mutating an existing object, checking for value equality reduces to instance equality checking.&lt;/p&gt;
&lt;p&gt;Because of how change notification works in React, immutability is also encouraged because it allows easy diffing of object trees because the comparison algorythm doesn’t have to go drill down recursively, it can simply stop when two fields name the same differ in instance.&lt;/p&gt;
&lt;p&gt;Quite often, beginner React developers write code like this:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;updateTask&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; newText&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTask&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;find&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;task&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;newText&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTask&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;completed&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;lastName&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do something else insted.&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;updateTask&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTask&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;tasks&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;find&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;person&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;person&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTask&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingTaskIndex&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;persons&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;indexOf&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingPerson&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;persons&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;[] &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;firstName&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;existingPerson&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;lastName&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;lastName&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;this.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;setState&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      persons&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;persons&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    })&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ensures updating works.&lt;/p&gt;
&lt;p&gt;Redux is in a some ways similar to the concept of &lt;a href=&quot;https://reactjs.org/docs/lifting-state-up.html&quot;&gt;lifting state up&lt;/a&gt;, but instead of lifting it up to a parent component, we push it to a single shared store. Our fully-fledged todos reducer would look like this:&lt;/p&gt;
&lt;pre class=&quot;shiki&quot; style=&quot;background-color: #292D3E&quot;&gt;&lt;code&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; ADD_TODO &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; TOGGLE_TODO &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;TOGGLE_TODO&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; CLEAR_TODOS &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #C3E88D&quot;&gt;CLEAR_TODOS&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; todosReducer &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; []&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FF9CAC&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      ]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;TOGGLE_TODO&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #82AAFF&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;todo&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #C792EA&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;todo&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;===&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;todo&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; { completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;todo&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;completed&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; } &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;todo&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      })&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #FFCB6B&quot;&gt;CLEAR_TODOS&lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt; []&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF; font-style: italic&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #F07178&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;      return &lt;/span&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;state&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #F07178&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #89DDFF&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color: #A6ACCD&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of calling &lt;code&gt;setState()&lt;/code&gt;, we dispatch an action which is received by a reducer which returns a new value for the application state based on the existing state and the action. Just like setState, a reducer typically leaves the existing fields untouched and just overrides what we want to change but the result is a new instance. In case we don’t want to change anything, we should return state instead of &lt;code&gt;{...state}&lt;/code&gt;. Instance comparison still works.&lt;/p&gt;</content:encoded></item></channel></rss>