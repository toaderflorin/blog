{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024-01-03-architecture/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"092c39b9-db01-5fc0-b032-b2baf20a4de6","excerpt":"One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company.\nAnd if there are multiple…","html":"<p>One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company.\nAnd if there are multiple microservices involved, which all use different approaches, it can be confusing.\nSome older microservices might use MVC, in a Web API context. The newer ones might use minimal APIs. A select few might do CQRS.</p>\n<p>Ultimately, it all boils down to things like cohesion, coupling, and encapsulation.</p>\n<p>The PC architecture is one of the simplest analogy you can use to explain these concepts to a junior developer. It would consist of the following components:</p>\n<ul>\n<li>A motherboard.</li>\n<li>A CPU, which can be an x86 or arm.</li>\n<li>Hard disk drives.</li>\n<li>A graphics card.</li>\n<li>Memory chips.</li>\n</ul>\n<img src=\"moth.png\" class=\"img\" />\n<p>Right off the bat, we notice that everything is modular, and everything consists of components communicating through standardized interfaces. The CPU doesn’t communicate directly to RAM, it goes through the motherboard. Same with the graphics card, etc.</p>\n<h2>Coupling</h2>\n<p>Let’s assume we have created a very powerful PC for development. But after a while, we might want to turn it also use it as a gaming PC. We can swap out our old graphics card with a newer one, and very easily, and it doesn’t really impact the system in any way, because it doesn’t affect the rest of the system, and because it communicates with the rest through a PCI interface on the motherboard. This is an example of decoupling.</p>\n<p>A simple analogy with for better understanding coupling is a Rubik’s cube.</p>\n<img src=\"rubik.jpeg\" class=\"img\" />\n<p>Have you ever tried to solve one of these? If you don’t know the trick, what you will try to do is to solve one face first, and then try to focus on the others.\nOf course, this doesn’t work because the colors are coupled and trying to change the unsolved faces breaks the existing ones.</p>\n<h2>Encapsulation</h2>\n<p>An interesting fact about HDD drives is they have their own cache where data that’s accessed frequently is retrieved from it. But this is transparent to applications using the HDD.</p>\n<img src=\"hdd.png\" class=\"img\" />\n<p>The HDD itself has a printed circuit board and a controller and it communicates via the SATA interface.<br>\n<br /></p>\n<h2>Dependencies And Agnosticism</h2>\n<p>With PCs, you are dealing with stable interfaces like SATA etc., but when writing your own code you will need to come up with your own patterns for communicating between components.\nHere’s a rule of thumb: if two components depend on each other in both directions, you essentially have just one monolith. Now let’s take it up a notch.\nThis is why a layered approach is so important.</p>\n<p>Notice that the lower level layer are agnostic to how they are being used.</p>\n<p>This is why building things using components is so important.</p>\n<h2>Classic 3-tier</h2>\n<p>And there you have it.</p>\n<p>An example of the 3-tier is this:</p>\n<img src=\"tiered.png\" class=\"img\" />\n<p>Some final notes.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">IRepository</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetById</span><span style=\"color: #89DDFF\">(int</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">id</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #FFCB6B\">IEnumerable</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetAll</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">void</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">entity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">void</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Update</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">entity</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #A6ACCD\">C</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">void</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Delete</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">entity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre>\n<p>Now we are using it.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">IRepository</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   public class EntityFrameworkRepository&lt;T&gt; : IRepository&lt;T&gt; where T : class</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    private readonly DbContext _context</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    private readonly DbSet&lt;T&gt; _dbSet</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #FFCB6B\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">EntityFrameworkRepository</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">DbContext</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">context</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        _context </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> context</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        _dbSet </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> _context</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    public </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetById</span><span style=\"color: #89DDFF\">(int</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">id</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #A6ACCD\"> _dbSet</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">Find</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">id</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    public </span><span style=\"color: #FFCB6B\">IEnumerable</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetAll</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #A6ACCD\"> _dbSet</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ToList</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre>\n<p>And here’s how you use it:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">IRepository</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   public class EntityFrameworkRepository&lt;T&gt; : IRepository&lt;T&gt; where T : class</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    private readonly DbContext _context</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    private readonly DbSet&lt;T&gt; _dbSet</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #FFCB6B\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">EntityFrameworkRepository</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">DbContext</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">context</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        _context </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> context</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        _dbSet </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> _context</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">Set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    public </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetById</span><span style=\"color: #89DDFF\">(int</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">id</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #A6ACCD\"> _dbSet</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">Find</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">id</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    public </span><span style=\"color: #FFCB6B\">IEnumerable</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">GetAll</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #A6ACCD\"> _dbSet</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ToList</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre>","frontmatter":{"title":"Explaining Architectural Concepts","date":"January 01, 2024","description":"One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company. And if there are multiple microservices involved, which all use different approaches, it can be confusing. Some older microservices might use MVC, in a Web API context. The newer ones might use minimal APIs. A select few might do CQRS.  "}},"previous":{"fields":{"slug":"/2022-02-27-cqrs/"},"frontmatter":{"title":"You Probably Don't Need CQRS"}},"next":{"fields":{"slug":"/2022-02-27-cqrs/"},"frontmatter":{"title":"You Probably Don't Need CQRS"}}},"pageContext":{"id":"092c39b9-db01-5fc0-b032-b2baf20a4de6"}},"staticQueryHashes":[]}