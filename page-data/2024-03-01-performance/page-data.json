{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024-03-01-performance/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"87e60846-6854-54c5-803f-b6bbfd63fb37","excerpt":"Here’s something that might be a bit controversial: I believe that for most software projects, the performance of the language (C#, Golang, PHP, Ruby) doesn’t…","html":"<p>Here’s something that might be a bit controversial: <em>I believe that for most software projects, the performance of the language (C#, Golang, PHP, Ruby) doesn’t matter that much. The reason I am writing this article is that I’ve seen an almost cultlike obsession with various languages and tech stacks, to the point where teams are pushing for a complete rewrite of the application. Even if there isn’t a push for a complete rewrite, there usually is a push for a <em>polyglot</em> microservice setup, which has its own problems.</em></p>\n<p>I believe this is  not warranted for most projects, and I’ll explain why. But first, let’s look at a benchmark showing raw performance for different languages.</p>\n<img src=\"perf.jpg\" class=\"img\" loading=\"lazy\" />\n<p>As we can see, there’s quite a big difference between, say C and PHP, and if you were to implement a game, or a database engine, the choice of language would matter <em>a lot</em>. But most projects aren’t relational database engines or games, they are web applications. And most applications actually use frameworks, written on top of a language, which interact with native code. But before we get into specifics, let’s look at code optimization, or specifically an approach to code optimization.</p>\n<h3>Inner Loop Optimization</h3>\n<p>A common theme when thinking about optimizing code is the concept of <em>inner loop optimization</em>. Consider the following code:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #A6ACCD\"> before </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> after </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> inner </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">0</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #A6ACCD\"> n </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #C792EA\">let</span><span style=\"color: #A6ACCD\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\"> i</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">before</span><span style=\"color: #89DDFF\">++</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #F07178\">(</span><span style=\"color: #C792EA\">let</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">j</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">j</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">j</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #A6ACCD\">inner</span><span style=\"color: #89DDFF\">++</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">after</span><span style=\"color: #89DDFF\">++</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> before</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> inner</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> after </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\">)</span></span></code></pre>\n<p>Output for n equals 10.</p>\n<pre class=\"shiki-unknown\"><code>{ before: 10, inner: 100, outer: 10 }</code></pre>\n<p>And for n equals 100.</p>\n<pre class=\"shiki-unknown\"><code>{ before: 100, inner: 10000, outer: 100 }</code></pre>\n<p>We quickly see that the inner loop takes much longer than the outer loop, and this gets more and more pronounced, the bigger n is. Now imagine we have three loops, or four loops. It gets progressively worse. A lot of code uses inner loops, and while the lines of code of the functionality in the inner loop might not necessarily be more than the outer loop, they have significantly more impact on performance. Which is why a lot of optimizing efforts are targeted on the inner loop code.</p>\n<p>When comparing a normal rendered picture, we can see that the polygon vertexes (corners) are much lower in number than the number of pixels. And the per pixel correct texture mapping happens inside the inner loop, where performance matters. Also, correct texture mapping requires two divides per pixel and is quite expensive. So the inner loops were written in assembly (and texture correction was done every 8 pixels—the code used linear interpolation in between).</p>\n<h3>The Classic 3-Tier Architecture</h3>\n<p>This is quite academic, so how does this help is? We need to consider a typical web app using a 3-tier architecture.</p>\n<ol>\n<li>Your API gets an HTTP request.</li>\n<li>Based on this request, you run some authorization /  request validation logic.</li>\n<li>If validation logic passes, you run some business logic code.</li>\n<li>This logic reads or writes to a database, usually using an ORM.</li>\n<li>The ORM code generates SQL, which is run against a relational database.</li>\n<li>This SQL is translated into an execution plan.</li>\n<li>The results are returned to the API, then mapped and returned to the caller.</li>\n</ol>\n<p>We can ask ourselves what the inner loop would be here. That would be the SQL execution plan. In fact, if you do some profiling, you will find that most of the time is being spent on the database level.</p>\n<p>Here’s an example of a simple exection plan.</p>\n<pre class=\"shiki-unknown\"><code>------------------------------------------------------------------------------\n| Id | Operation           | Name        |Rows | Bytes |Cost (%CPU)| Time    |\n------------------------------------------------------------------------------\n|  0 | SELECT STATEMENT    |             |   4 |   124 |   5  (20)| 00:00:01 |\n|  1 |  SORT ORDER BY      |             |   4 |   124 |   5  (20)| 00:00:01 |\n|* 2 |   HASH JOIN         |             |   4 |   124 |   4   (0)| 00:00:01 |\n|* 3 |    TABLE ACCESS FULL| CATEGORIES  |   4 |    60 |   2   (0)| 00:00:01 |\n|  4 |    TABLE ACCESS FULL| PRODUCTS    |  27 |   432 |   2   (0)| 00:00:01 |\n------------------------------------------------------------------------------</code></pre>\n<p>What happens here is;</p>\n<ol>\n<li>The engine doesn’t an inner join between the categories and products using the hash join algorithm.</li>\n<li>It sorts the output of this join, and selects only some columns.</li>\n</ol>\n<p>While a hash join can be quite performant, the sort is costly. Also, keep in mind that the execution plan you are getting depends both on what indexes you have in the databases, as well as the ORM. And yes, ORM performance does matter, however. Here is an interesting graph comparing the performance of different ORMs available for Node.js.</p>\n<img src=\"performance.png\" class=\"img\" loading=\"lazy\" />\n<p>As you can see, there are other factors that matter a lot more than if you’re using C# instead of PHP.</p>","frontmatter":{"title":"Language Performance Doesn't Matter (Most Of The Time)","date":"March 06, 2024","description":"Here's something that might be a bit controversial: I believe that for most software projects, the performance of the language (C#, Golang) doesn't matter that much. The reason I am writing this article is that I've seen an almost cultlike obsession with various languages and tech stacks, to the point where teams are pushing for a complete rewrite of the application. I believe this is  not warranted for most projects. ","image":"cucumber.jpg","cells":null}},"previous":{"fields":{"slug":"/2022-05-30-estimations/"},"frontmatter":{"title":"Why It's So Hard To Get Estimations Right?"}},"next":{"fields":{"slug":"/2022-05-30-estimations/"},"frontmatter":{"title":"Why It's So Hard To Get Estimations Right?"}}},"pageContext":{"id":"87e60846-6854-54c5-803f-b6bbfd63fb37"}},"staticQueryHashes":[]}