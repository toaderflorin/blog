{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"allMarkdownRemark":{"nodes":[{"excerpt":"A typical approach that a lot of developers take to improve query performance would be to add a lot of indexes to your database, but I’d…","fields":{"slug":"/2022-08-07-indexes/"},"frontmatter":{"date":"February 10, 2024","title":"Use SQL Indexes With Caution","icon":"binary-tree.png","description":"A typical mistake among junior developers is adding too many indexes to tables in SQL databases, way more than it would be necessary. On first impression, it wouldn't look like they would be a big deal, but that's not the case. A Simple Paralel: Think of indexes as a Indexes use B-tree structures, which generalize binary trees and allow for logarithmic time searches. These B-trees also need to be rebalanced. Before we get into B-trees, we need to discuss balancing binary trees and why that is important. "}},{"excerpt":"Languages like Ruby or PHP (and the frameworks built on top of them) get a lot of flack for lacking performance, because they are…","fields":{"slug":"/2024-01-19-join-algorithms/"},"frontmatter":{"date":"January 19, 2024","title":"Big O Notation And RDBMS Join Algorithms","icon":"icon.jpg","description":"MUI is one of the most powerful and popular of the React libraries out there, because it comes prepacked with a lot of controls (let’s face it, nobody wants to build a calendar). The idea behind it is it’s an implementation of Google’s Material Design, and it’s really opinionated in that regard, and herein lies one of its problems: a lot of designers don’t want their application to look like Gmail or Android, they will want a specific look and feel. "}},{"excerpt":"MUI is one of the most powerful and popular of the React libraries out there, because it comes prepacked with a lot, and I mean a lot, of…","fields":{"slug":"/2024-01-10-styling/"},"frontmatter":{"date":"January 13, 2024","title":"Is Radix UI More Easy To Customize Than MUI?","icon":"icon.jpg","description":"MUI is one of the most powerful and popular of the React libraries out there, because it comes prepacked with a lot of controls (let’s face it, nobody wants to build a calendar). The idea behind it is it’s an implementation of Google’s Material Design, and it’s really opinionated in that regard, and herein lies one of its problems: a lot of designers don’t want their application to look like Gmail or Android, they will want a specific look and feel. "}},{"excerpt":"During my development work, I have repeatedly come across the following pattern. The designer produces a design in Figma, and will attach…","fields":{"slug":"/2024-01-10-cdd/"},"frontmatter":{"date":"January 10, 2024","title":"Explaining The Dev Designer Impedance Mismatch Problem","icon":"small.jpg","description":"Architects are the creatives who conceptualize and design the overall form, function, and aesthetics of buildings. They consider factors like aesthetics, functionality, sustainability, and user experience to create spaces that are both aesthetically pleasing and functionally effective. Architects possess a deep understanding of architectural history, design principles, and building codes. They translate client requirements into detailed drawings and specifications that guide the construction process.  "}},{"excerpt":"First, when creating a new application, should you start off with a microservice architecture? Well, the prevailing wisdom is no, because…","fields":{"slug":"/2024-01-06-modules/"},"frontmatter":{"date":"January 06, 2024","title":"Should I Pre-Decouple Modules In My Modular Monolith?","icon":"modular.jpg","description":"First, when creating a new application, should you start off with a microservice architecture? Well, the prevailing wisdom is no, because there is significant cost associated with maintaining, deploying, hosting., multiple microservices.Let's also look at some microservice tenets: 1. Microservices need to own their own data, which means you need a database for each. 2. Instead of synchronous communication, you usually use message based communication to ensure decoupling. "}},{"excerpt":"Any lawyer will tell you that legal contracts must follow very specific rules, otherwise they can be deemed invalid: you simply cannot type…","fields":{"slug":"/2024-01-08-ddd-bdd/"},"frontmatter":{"date":"January 06, 2024","title":"Atomic Specs: DDD and BDD Are a Match Made In Heaven","icon":"small.jpg","description":"Any lawyer will tell you that contracts need to be specific, otherwise they can be thrown out of court quite easily. Prenuptial agreements are famous for being thrown out of court. In the Pacific Bell v. Superior Court of Alameda County case, the court held that a contract between a telephone company and its customers was invalid because it was ambiguous and did not clearly define the scope of the company’s services. "}},{"excerpt":"Something I’ve seen more and more in SCRUM teams is the concept of gamification. Gamification is the process of applying game-like elements…","fields":{"slug":"/2024-01-05-gamification/"},"frontmatter":{"date":"January 01, 2024","title":"Gamification Leads To People Gaming The System","icon":"controller.png","description":"Gamification is the process of applying game-like elements and mechanics to non-game contexts to enhance user engagement, motivation, and overall experience. It involves incorporating game design elements such as points, badges, leaderboards, challenges, and rewards into non-game activities, such as marketing campaigns, educational programs, workplace training, and even daily tasks. The goal of gamification is to tap into the natural human desire for challenge, competition, and social interaction that we experience when playing games.  "}},{"excerpt":"One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company. And if there are…","fields":{"slug":"/2024-01-03-architecture/"},"frontmatter":{"date":"January 01, 2024","title":"The PC Architecture Is The Best Way To Explain Software Architecture In General","icon":"ar.png","description":"One of the tasks of a senior developer is to introduce architectural concepts to new junior developers joining the company. And if there are multiple microservices involved, which all use different approaches, it can be confusing. Some older microservices might use MVC, in a Web API context. The newer ones might use minimal APIs. A select few might do CQRS.  "}},{"excerpt":"A common theme on the blog is the practicality of approaches (and avoiding development dogma). For example,  Elm is a great technology stack…","fields":{"slug":"/2022-10-07-microfrontends/"},"frontmatter":{"date":"October 10, 2023","title":"Breaking The Frontend Monolith","icon":"polyglot.jpeg","description":"When Google announced that it would be rebooting AngularJS and that Angular 2.0 would be effectively a new framework, a lot of companies with products built on the old version were put in a difficult situation of having to either restart building their product from scratch or continue with a deprecated technology or you some kind of hybrid solution. Continuing to build on a deprecated technology is obviously risky. As time passes, there are no more updates to the library, and finding developers willing to work on it becomes harder and harder, so this isn't really an option. "}},{"excerpt":"As most readers would probably guess, this is about messy code and technical debt. But the primary motivation isn’t to mention that software…","fields":{"slug":"/2023-05-30-entropy/"},"frontmatter":{"date":"May 30, 2023","title":"A Surprising Fact About Code Entropy In Large Projects","icon":"ab.jpg","description":"Your apartment gets messier, not cleaner, without you putting in the effort. Your hard drive gets cluttered and defragmented. Objects like your phone get dings on them, they don’t get shiner and smoother. Flowers whither away and die. Yes, it happens to code."}},{"excerpt":"The word cloud native gets thrown around quite a bit, and depending on who you ask, you’ll get significantly different answers. My favorite…","fields":{"slug":"/2022-10-12-hyperscale-named/"},"frontmatter":{"date":"October 15, 2022","title":"Cloud Native Relational Databases Are Truly Game Changing","icon":"hyperscale.png","description":"A common theme on this blog is performance optimizations and practical, real-world-oriented development. We talked about sharding, but probably most companies would want to do something other than roll out their custom sharding solution. A very simple way to improve performance is to implement a caching solution on your endpoints. But that still requires going to every endpoint and adding caching logic, thinking about cache eviction, etc.\n\n"}},{"excerpt":"The estimation proces and estimation related time pressure are probably some of the most contentious aspects of software development, and it…","fields":{"slug":"/2022-05-30-estimations/"},"frontmatter":{"date":"May 30, 2022","title":"Why It's So Hard To Get Estimations Right?","icon":"opera-icon.png","description":"The estimation proces and estimation related time pressure are probably some of the most contentious aspects of software development - it is usual for project managers to try to push down initial estimations made by developers, either because of pressure placed on themselves by varios stakeholders or because they know that tasks tend to take up the whole allotted time (because of developer procrastination), or both. To make matters worse, a whopping 70% of projects are considered failures based on initial targets. Even if the teams use agile methodologies, a large number of the sprints will fail to meet their story point target. "}},{"excerpt":"The CAP theorem is usually the first thing that comes up when discussing replication / data-store options on distributed systems, but…","fields":{"slug":"/2022-04-09-cap/"},"frontmatter":{"date":"April 09, 2022","title":"The CAP Theorem Hugely Oversimplifies Things","icon":"cap-icon.png","description":" The CAP theorem is usually the first thing that comes up when discussing replication / data-store options on distributed systems, but considering how popular it is, it’s surprising that it’s not understood correctly most of the time. The CAP letters refer to Consistency, Availability, and Partition tolerance, and it’s worth mentioning that it is merely an idealization (abstraction) because real-world situations are significantly more complicated. "}},{"excerpt":"CQRS has been popular for quite a few years (more than a decade old at this point), and while it’s no longer in the hype phase of adoption…","fields":{"slug":"/2022-02-27-cqrs/"},"frontmatter":{"date":"February 27, 2022","title":"You Probably Don't Need CQRS","icon":"cqrs-icon.png","description":" CQRS has been popular for quite a few years (more than a decade old at this point), and while it's no longer in the hype phase of adoption, it still gets brought up quite a bit during architectural discussions for new projects (usually in conjunction with microservices). A few years after the pattern became popular, there was mounting criticism against it, mainly because of the complexity it introduces - with critics citing it as a typical example of over-engineering / premature optimization. "}},{"excerpt":"Closures are probably one of the most unintuitive features for newcomers to Javascript, especially if they come from languages such as Java…","fields":{"slug":"/2022-02-26-js-closures/"},"frontmatter":{"date":"February 26, 2022","title":"Execution Contexts, Scopes and Closures","icon":"hook-icon.png","description":"Closures are probably one of the most unintuitive features for newcomers to Javascript, especially if they come from languages such as Java or C#. The notion of a function within another function itself isn't hard to understand, the significant hurdle in understanding comes with preserving the lexical environment around these functions once the parent function has finished executing. There are also quite a few articles that use misleading terminology -- for example, context versus execution context, lexical environment versus scope, etc. We'll aim to clarify the terms.  "}},{"excerpt":"Since a single database server can support a considerable load, it’s worth starting by saying that the need to scale out your database…","fields":{"slug":"/2022-02-14-scaling-sql/"},"frontmatter":{"date":"February 15, 2022","title":"A Begginer's Guide Scaling Out Relational Databases","icon":"shard-icon (1).jpg","description":" Since a single database server can support a considerable load, it's worth starting off by saying that needing to scale out your database server means your business is doing several things right, so this is a good problem to have. While getting a machine with more processor cores, memory and disk space can alleviate your problems in the short term, at some point needing to distribute your database across multiple machines becomes unavoidable. "}},{"excerpt":"When implementing simple React applications, Redux might cause significant overhead, and just using component state might be enough. There…","fields":{"slug":"/2022-01-29-functional-state/"},"frontmatter":{"date":"January 28, 2022","title":"A Different Take On Handling Local State Using Hooks","icon":"usestate.jpg","description":" When implementing simple React applications, Redux might cause significant overhead, and just using component state might be enough. There are however differences between class components and function components related to how hooks work, which we'll look at next. With classes, component state is accessible via this.state, and updating it (and triggering component rerendering) is done via this.setState. In functional components, we use the <i>useState</i> hook and instead of merging the object we're passing in, the state is replaced. "}},{"excerpt":"In the previous example, we went over a global store app pattern that emulates Redux. The main advantage of this approach is familiarity…","fields":{"slug":"/2022-01-17-simple-state/"},"frontmatter":{"date":"January 16, 2022","title":"Simplifying State Handling","icon":"store.jpg","description":" In the previous example, we went over a global store app pattern that emulates Redux. The main advantage of this approach is familiarity, meaning that developers can structure their projects using a similar folder/code structure. There is, however, an alternative approach popularized by  Svelte, which is less verbose. While this is a familiar approach, many developers feel that the single-store architectural approach leads to bad software patterns. "}},{"excerpt":"While the rumors about Redux’s demise are most likely mostly exaggerated, there is no doubt we can achieve a lot of the functionality it…","fields":{"slug":"/2022-01-12-hooks-architecture/"},"frontmatter":{"date":"January 11, 2022","title":"What If We Wanted To Use Hooks Instead Of Redux?","icon":"icon.png","description":" While the rumors about Redux's demise are most likely mostly exaggerated, that there is no doubt we can achieve a lot of the functionality it provides with hooks. Also, as a rule of thumb, we should avoid using as many external libraries as possible because chances are they could become deprecated in the future. While using the useReducer hook is relatively straightforward, React doesn't provide a prescription on how to structure a relatively large application. "}},{"excerpt":"React’s development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of libraries…","fields":{"slug":"/2021-11-18-hooks/"},"frontmatter":{"date":"November 18, 2021","title":"React Hooks Can Be Confusing","icon":"hook-icon.png","description":" React's development history is widely documented and was developed for internal use at Facebook, as it is the case with a lot of librarie, and for quite some time it was ES5 only - ES6 support of course followed, but the team quite quickly realized that if a component doesn't need to maintain an internal state, there's no need for it to be a class, and one of the major additions of v14.0 were stateless functional components. Not long after, the container / presentational pattern appeared, where the state changes would be handled in a wrapping class component, and the inner child component would handle the presentation part. "}},{"excerpt":"Before getting into library-specific details, it’s worth starting with a definition of what constitutes reactivity. A typical example would…","fields":{"slug":"/2021-11-05-immutability/"},"frontmatter":{"date":"November 05, 2021","title":"Reactivity And Immutability In React","icon":"reactivity-icon.png","description":" Before getting into library-specific details, it's worth starting with a definition of what constitutes reactivity. A typical example would be an Excel spreadsheet: if a cell aggregates data from other cells, that cell instantly changes if we change a value in any of the aggregated cells. In reactive programming, if a variable A depends on B and C, a change in either B or C would also trigger a change in A. While there seems to be an ongoing debate whether React is truly reactive, there's no doubt that the UI reacts to changes in the data model, even if parts of the model itself don't react to other parts being changed, so from now on, we'll consider this definition of reactivity. "}}]}},"pageContext":{}},"staticQueryHashes":[]}